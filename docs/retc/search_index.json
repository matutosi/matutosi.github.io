[["index.html", "Rにる作業の自動化・効率化 -パッケージ活用術- はじめに", " Rにる作業の自動化・効率化 -パッケージ活用術- Toshikazu Masumura 2023-05-05 はじめに 誰でもそうだろうが，面倒くさい仕事はしたくない． というか，したくないことが面倒くさいのだろう． ニワトリかタマゴのような話は別として，できることなら，面倒な作業は自動化したい． もちろんすべての仕事を自動化できるわけでもないし，文章執筆のように作業内容によっては自動化すべきでないこともある． 作業の自動化には，プログラミング言語を使うことが多い． 自動化でよく使われる言語としては，Pythonがある． Pythonは比較的習得しやすい言語らしく，多くの人が使っている． 自分自身も多少はPythonを使えるものの，それよりもRの方が慣れている． できることなら(ほぼ)全ての作業をRでやってしまいたい． そんなわけで，この文章ではRを使った作業の自動化や効率化方法を紹介する． 基本的に独学でここまで来たので，我流のスクリプトや汚いコードが多くあると思われるがご容赦頂きたい． また，改善案をご教示いただければありがたい． matutosi@gmail.com "],["R.html", "Chap. 1 Rとは 1.1 特徴 1.2 1点突破 1.3 充実したヘルプ・ドキュメント", " Chap. 1 Rとは Rは，統計解析環境であるとともに，プログラミング言語である． プログラミング言語としては，やや特殊な文法をもっている． そのため，他の言語よりも好き嫌いが激しいと思われる． 1.1 特徴 プログラミング言語としてのRが文法的に特殊な点では，代入での「&lt;-」使用とパイプ(「%&gt;%」や「|&gt;」(R-4.1以降))を多用することが挙げられる． 他の多くのプログラミング言語では，代入には「=」を使用する． Rでも「=」を使えるが，「&lt;-」を好んで使う人が多いと思われる． 少なくとも私はそうしている． 理由を問われても特には思いつかないが，慣れていることや，コードを見た時にすぐにRだとわかるぐらいだろうか． 実用的には，「=」を入力するよりも手間がかかるし面倒なはずであるが，すでに手が慣れてしまっている． パイプを最初に見たときには違和感を覚えたが，使い始めるとクセになる． クセになるだけではなく，同じ変数名を何度も使ったり，中間の変数名を考えなくて良い点で優れている． 第1引数を省略できるため，入力の手間が少ない． パイプだけの恩恵ではなく，tidyverseの利用も大きいが，コードが簡潔になって，コードの使い回しもし易い． パイプにはこのような多くの利点がある． 他にも「::」がやたらと出てくることや，実行速度が遅いなど欠点もそれなりにある． そもそも完璧なプログラミング言語などそ存在せず，それぞれが利点・欠点を持っている． それぞれの得意な分野でうまく使うことが重要である． とはいいながら，多くのプログラミング言語を習得するのは困難である． 私はこれまでちょっとだけでもかじったことのある言語としては， FORTRAN，Perl，Ruby，C，C++，VBA，Java，Python，JavaScript，Rなどがある． それぞれなんとなく読むことはできるが，実際によく使うのはRだけである． JavaScriptはその次に使っているが，頻度は非常に低い． Pythonは勉強中である． 1.2 1点突破 プログラミング言語にはそれぞれ得意分野があることは確かだが，垣根を超えて使うことはできる． 例えば，RからPythonを使うパッケージとしてreticulateがあり，PythonからRを使うパッケージとしてrpy2がある． つまり，1つのプログラミング言語でしか実行できないものはほとんどなく，使いたい言語を使って勉強したい言語を勉強すれば良い． 汎用的なプログラミング言語としては，Python，C，C++，Javaが，Web関連ではJavaScriptが広く使われている． Rの総本山であるCRANには，他にも様々なパッケージがあり，これらの言語に関連した多くの道具が揃っている． そのため，Rを通してこれらの言語やそれに含まれるパッケージを利用することは可能である． 多くの言語を習得するのも良いが，習得にはかなりの時間が必要である． いっそのこと1つの言語をある程度極めて，そこから使えるものは使うのも良い方法と言えるだろう． つまり一点突破の手法である． そこで，Rのパッケージを使って，各種操作をすることを目的にこの文章を執筆した(している)． もちろんだが，エラーが出たときの対処やより良い利用のためには，それぞれの言語のことを少しは知っておいた方が良い． 場合によっては，R以外の言語でコードを書く方が良い場合もある． 例えば，私自身の例としては，編集距離を計算するコードをCで書いたことがある． 正直なところはCで書いたというよりも，ネットで元になるコードを探して，多少アレンジしただけである． 編集距離は，植物の学名や和名の間違い候補を提案するための関数を作成するために必要であったが，Rでの実装では実行速度に問題があった． そのため，部分的にCで書いてそれをパッケージRcppを利用して自作のパッケージに組み込んだ． このような利用は実際のRのパッケージでも多く採用されており，R本体や各種パッケージの多くの関数はCやC++で実装されている． 結局のところ，表面的にはRを使っていても，他の言語のお世話になっていることは多い． Rだけを勉強してもかなりのことはできるし，他の言語であっても結局は同じようなことが言える． Rにかぎらず自分の得意とする言語を深く勉強するとともに，他の言語も少し知っておくのが良いだろう． 1.3 充実したヘルプ・ドキュメント Rにはヘルプ・ドキュメントがしっかりしているというのも非常に良い． ヘルプは，「?関数名」としてRから直接呼び出すことができ，関数の引数，返り値，使用例などが詳しく解説されていることが多い． ユーザーとしてはいちいちネットや書籍で調べなくても良いのが心強い． パッケージの開発者としては，既存のパッケージのドキュメントがしっかりしているため，それに合わせるべくしっかりとしたドキュメントを書かなければならないという圧力はあることは事実である． ただ，ドキュメントをしっかり作っておかないと，開発者も関数の使い方を忘れてしまうことになりかねないため，結局は「他人のためならず」である． "],["install.html", "Chap. 2 Rのインストール 2.1 ダウンロード 2.2 インストーラの起動 2.3 インストール完了", " Chap. 2 Rのインストール Rのインストール方法は，ネットでも多く掲載されている． ここでは，オプションの個人的な好みを強調しつつ説明する． 2.1 ダウンロード OSに合わせたインストーラをダウンロードする． Windowsの場合は，「Download R-4.x.x for Windows」(xはバージョンで異なる)をダウンロード． https://cran.r-project.org/bin/windows/base/ 2.2 インストーラの起動 ダウンロードしたファイルをクリック． 「…許可しますか?」に対して，「はい」を選択． インストール中に使用する言語 何でも大丈夫なので，好きなものを選ぶ． インストールの確認 「次へ」をクリック． インストール先のフォルダ そのままでOK．好みがあれば変更する． インストールするもの とりあえず，すべてチェックしておくくと良い． Message translationは，Rからのメッセージを日本語に翻訳するかどうか． チェックを入れないと，英語のみの表示． 結論としえは，とりあえずチェックを入れておき，必要に応じて英語で表示させるという方法が良いかもしれない． チェックを入れておくと，エラーメッセージなどを日本語で表示させることができる． 「そら日本語のほうが良いやん」と思うかもしれない． よくわからないエラーメッセージがしかも英語で表示されたら，わけがわからないからです． ただ，プログラミングの世界では，英語でのエラーメッセージのほうが便利なことが結構ある． それは，エラーメッセージをそのままネットで検索するときである． 日本語でのエラーメッセージだとネット上の情報が限られる． 一方，英語でのエラーメッセージで検索すると，原因や対処方法をかなりの確率で知ることができる． # https://cell-innovation.nig.ac.jp/SurfWiki/R_errormes_lang.html Sys.getenv(&quot;LANGUAGE&quot;) # 設定の確認 # 設定の変更方法 Sys.setenv(LANGUAGE=&quot;en&quot;) # 英語に変更 Sys.setenv(LANGUAGE=&quot;jp&quot;) # 日本語に変更 オプションの選択 とりあえず「Yes」を選択． 以下のオプションを選択するかどうか． ウィンドウの表示方法(MDI / SDI)の選択 個人的な好みはSDIですが，好みの問題ですので正直どちらでも大丈夫． MDI(左)は大きな1つのWindowの中に，コンソール(プログラムの入力部分)，グラフ，ヘルプなどが表示される． SDI(右)はコンソール，グラフ，ヘルプが別々のWindowとして表示される． どちらかといえば，自由度が高い． ヘルプの表示方法(Plain text / HTML help)の選択 個人的な好みはPlain textだが，好みの問題で正直どちらでも構わない． Plain textはテキストファイルで表示されるシンプルな作り． HTML helpはヘルプがブラウザ(GoogleChrome等)で表示される． 関連する関数などへのリンクが表示されるので，それらを参照するのは便利． その後の設定 その他は，既定値(そのまま)でOK． 2.3 インストール完了 インストールが完了すると，アイコンがデスクトップに表示される． アイコンをクリックすると，Rが起動する． "],["package.html", "Chap. 3 パッケージのインストール 3.1 CRANから 3.2 GitHubから", " Chap. 3 パッケージのインストール R単体でも多くの機能があるものの，実際には各種パッケージを利用することが多い． パッケージのインストールには，Rで簡単なコマンドを実行するだけである． 多くのパッケージが，Rの総本山であるCRANに登録されている． https://cran.r-project.org/ CRANに登録するには，それなりに厳しいチェックがある． ただし，私自身でも登録できていることが証明しているが，CRANに登録されたからといってバグが無いわけではない． そのためR本体もそうだが，Rのパッケージも利用はあくまで自己責任が基本である． CRANに登録されたパッケージの開発バージョンは，GitHubで公開されていることが多い． また，CRANには登録されずGitHubのみで公開されているパッケージも存在する． 3.1 CRANから CRANではR本体だけでなく，各種パッケージが公開されている． https://cran.r-project.org/web/packages/available_packages_by_name.html CRANに登録されたパッケージで名前がわかっていたら，以下のようにすればインストールできる． # ミラーサイト(ダウンロード元)の設定 options(repos = &quot;https://cran.ism.ac.jp/&quot;) # 1つの場合 install.packages(&quot;tidyverse&quot;) # 複数の場合 pkg &lt;- c(&quot;xlsx&quot;, &quot;magrittr&quot;, &quot;devtools&quot;) install.packages(pkg) 実行すると，ファイルをダウンロードし，成功(あるいは失敗)したことが表示される． 3.2 GitHubから たいていはCRANに登録されているが，GitHubにしかないパッケージもある． その場合には，以下のようにする． install.packages(&quot;devtools&quot;) devtools::install_github(&quot;matutosi/ecan&quot;) "],["assoc.html", "Chap. 4 スクリプトの関連付け", " Chap. 4 スクリプトの関連付け Rのプログラムのファイルは拡張子「script.R」のように「R」という拡張子を付けて保存することが多い． 「.docx」をワードで，「.xlsx」をエクセルで開くのと同様に，私は「*．R」をテキストエディタで開くするように設定している． その後，開いたファイルをRのコンソールに貼り付けて，プログラムを実行する． このような使い方でもちろん良いのだが，内容を変更しないのであれば面倒臭い． つまり，ファイルをクリックするだけで，プログラムが実行されれば便利である． プログラムをRに関連付けれることで，これが実現できる． プログラムのファイル名を「.R」から「.scr」に変更する(「scr」は大文字小文字は関係なく，「Rsc」や「RSC」などでもOK)． 拡張子が表示されていない場合は，エクスプローラの表示のオプションで，「登録されている拡張子は表示しない」のチェックを外して(チェックしないで)，「OK」を選択してから，名前を変更する． ファイルを右クリックして，「プロパティ」を選択． 「全般」タブのやや上にあるプログラムの「変更」を選択． 「PCでアプリを選択する」をクリック． ファイル選択画面で，Rをインストールしたフォルダまで辿っていき(「c:\\Program files\\R\\R-4.2.3\\bin\\x64」など)，「Rscript.exe」を選択する． 「.rscファイルの既定のアプリを選択する」で「R for windows front-end」が表示されるので，「既定値を設定する」を選択． 全般タブのプログラムが「R for windows front-end」になっていることを確認して．「OK」を選択． ファイルのアイコンがRのアイコンになっていたらOK． ダブルクリックすると，ファイルの内容が実行される(はず)． "],["magrittr.html", "Chap. 5 magrritrでコードを簡潔に 5.1 tidyverseとmagrittr 5.2 %&gt;%とその仲間", " Chap. 5 magrritrでコードを簡潔に パッケージmagrittrはちょっと変わっている． そもそも名前が変わっていて何と読んで良いのか分からない． 公式ページには「magrittr (to be pronounced with a sophisticated french accent) 」と書かれている． フランス語は，大学の第2外国語で習ったが，すでに記憶の彼方に沈んでしまっている． 主な関数がパイプ(%&gt;%)である点もちょっと変わっている． ただし，パイプ以外にもパイプとともに使うと便利な関数も含まれている． 例えば，set_colnames()はデータフレームの列名を変更する時に便利だ． パイプを使ったコードの途中で列名を変更するために，&lt;- colnames()でコードを区切るのは面倒である． # &lt;- colnames でできる? # [&lt;- また，set_colnames()以外にも，dplyrのrename()やselect()で列名を変更する方法もある． hoge &lt;- colnames(c(&quot;foo&quot;, &quot;bar&quot;)) hoge %&gt;% magrittr::set_colnames(c(&quot;foo&quot;, &quot;bar&quot;)) %&gt;% dplyr::filter(...) magrittrに含まれる関数たちで，どんな内容か気になるものの一覧 export(&quot;n&#39;est pas&quot;) export(add) export(and) export(equals) export(not) export(or) export(pipe_nested) export(set_colnames) export(use_series) 5.1 tidyverseとmagrittr tidyverseは，Rでのデータ解析には欠かせないものになっている． そこで，Rを起動時にtidyverseを読み込む人は多いだろう． なお，tidyverseは1つのパッケージではなく，複数のパッケージからなるパッケージ群である． library(tidyverse) tidyverseのパッケージ群を読み込んだときや，そのうちの個別のパッケージ(forcats，tibble，stringr，dplyr，tidyr，purrrなど)を読み込むと，%&gt;% (パイプ)を使うことができる． 私は%&gt;%がtidyverseの独自のものだと勘違いをしていた． しかし，%&gt;%はもとはパッケージmagrittrの関数であり，そこからインポートされている． そのため，tidyverseを読み込むと使うことができる． %&gt;%は，慣れるまでは何が便利なのか分からないが，慣れると欠かせなくなる． さらに使っていると，癖なってしまって無駄にパイプを繋ぐこともある． 長過ぎるパイプは良くないのは当然であるものの，適度に使うとRでのプログラミングは非常に楽になる． tidyverseの関数では，引数とするオブジェクトが統一されている． 具体的には，第1引数のオブジェクトがデータフレームやtibbleになっていることが多い． そのため，パイプと相性が特に良い． 5.2 %&gt;%とその仲間 %&gt;%の仲間としては，以下の関数もある． %&lt;&gt;% %T&gt;% %$% これらの関数は，tidyverseには含まれていないため，使用するにはmagrittrを読み込む必要がある． %&gt;%と同じように使うことができるが，役割がそれぞれ違う． library(magrittr) ## ## Attaching package: &#39;magrittr&#39; ## The following object is masked from &#39;package:purrr&#39;: ## ## set_names ## The following object is masked from &#39;package:tidyr&#39;: ## ## extract 5.2.1 %&lt;&gt;% %&lt;&gt;%は，パイプを使って処理した内容を，最初のオブジェクトに再度代入するときに使う． ほんの少しだけ，コードを短くできる． head(mpg) # 燃費データ ## # A tibble: 6 × 11 ## manufacturer model displ year cyl trans drv cty hwy fl class ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 audi a4 1.8 1999 4 auto(l5) f 18 29 p compa… ## 2 audi a4 1.8 1999 4 manual(m5) f 21 29 p compa… ## 3 audi a4 2 2008 4 manual(m6) f 20 31 p compa… ## 4 audi a4 2 2008 4 auto(av) f 21 30 p compa… ## 5 audi a4 2.8 1999 6 auto(l5) f 16 26 p compa… ## 6 audi a4 2.8 1999 6 manual(m5) f 18 26 p compa… tmp &lt;- mpg tmp &lt;- tmp %&gt;% dplyr::filter(year==1999) %&gt;% tidyr::separate(trans, into=c(&quot;trans1&quot;, &quot;trans2&quot;, NA)) %&gt;% head() %&gt;% print() ## # A tibble: 6 × 12 ## manufacturer model displ year cyl trans1 trans2 drv cty hwy fl ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; ## 1 audi a4 1.8 1999 4 auto l5 f 18 29 p ## 2 audi a4 1.8 1999 4 manual m5 f 21 29 p ## 3 audi a4 2.8 1999 6 auto l5 f 16 26 p ## 4 audi a4 2.8 1999 6 manual m5 f 18 26 p ## 5 audi a4 quatt… 1.8 1999 4 manual m5 4 18 26 p ## 6 audi a4 quatt… 1.8 1999 4 auto l5 4 16 25 p ## # ℹ 1 more variable: class &lt;chr&gt; tmp &lt;- mpg tmp %&lt;&gt;% dplyr::filter(year==1999) %&gt;% tidyr::separate(trans, into=c(&quot;trans1&quot;, &quot;trans2&quot;, NA)) %&gt;% head() %&gt;% print() ## # A tibble: 6 × 12 ## manufacturer model displ year cyl trans1 trans2 drv cty hwy fl ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; ## 1 audi a4 1.8 1999 4 auto l5 f 18 29 p ## 2 audi a4 1.8 1999 4 manual m5 f 21 29 p ## 3 audi a4 2.8 1999 6 auto l5 f 16 26 p ## 4 audi a4 2.8 1999 6 manual m5 f 18 26 p ## 5 audi a4 quatt… 1.8 1999 4 manual m5 4 18 26 p ## 6 audi a4 quatt… 1.8 1999 4 auto l5 4 16 25 p ## # ℹ 1 more variable: class &lt;chr&gt; 注意点としては，試行錯誤でコードを書いている途中は，あまり使わないほうが良いだろう． もとのオブジェクトが置き換わるので，処理結果が求めるものでないときに，もとに戻れなくなってしまう． コードを短くできるのは1行だけで，可読性が特に高くなるというわけでもない． 便利なことは便利で，私も一時期はよく使用していた． しかし，上記の理由もあって，最近はほとんど使用していない． 5.2.2 %T&gt;% 処理途中に分岐をして別の処理をさせたいときに使う． 例えば，ちょっとだけ処理して，変数に保存するときに使う． imapと組み合わせて，保存する画像のファイル名を設定する時に使うと便利である． %T&gt;%は便利ではあるが，以下の点で注意が必要である． - 分岐途中の結果をオブジェクトに代入するときには，&lt;-ではなく，&lt;&lt;-を使う - 明示的に「.」を使う - 複数処理があれば，「{}」で囲う - 処理終了後に「%&gt;%」が必要 例のコードを示す # mpg %T&gt;% # { # tmp &lt;&lt;- dplyr::select(., ) # } %&gt;% %T&gt;%を使うとコードの途中に，ちょっとだけ枝分かれしたコードを挿入できる． 有用な機能ではあるが，トリッキーなコードになる可能性があるため，使いすぎには気をつけたい． 5.2.3 %$% %$%は，%&gt;%と.$の組み合わせのショートカットである． mpg %&gt;% .$manufacturer %&gt;% head() ## [1] &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; mpg %$% manufacturer %&gt;% head() ## [1] &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; パッケージ開発ではパイプを使った場合の.が推奨されていない． R CMD CHECK(???)のpossible problemでWarningが出力され，そのままではCRANでは受け付けてもらえない(たぶん)． automaterのようにGithubでパッケージを公開するならそれでも問題はないが，Checkで毎回Warningが出力されるのは，心理的に嬉しくない． そこで，DESCRIPTIONで次のように%$%や%&gt;%をインポートしておくと，パッケージの中でこれらを使える． %&gt;%だけなら，usethis::use_pipe()とすれば，開発パッケージのDESCRIPTIONに，importFrom(magrittr,“%&gt;%”)を書いてくれる． importFrom(magrittr,&quot;%&gt;%&quot;) importFrom(magrittr,&quot;%$%&quot;) なお余談ではあるが，この場合は$の代わりに[[と]]を使っても同じ結果が得られる． [と]ではデータフレームの1列をそのまま取り出すので，結果が異なる． mpg %&gt;% .$manufacturer %&gt;% head() ## [1] &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; mpg %&gt;% .[[&quot;manufacturer&quot;]] %&gt;% head() ## [1] &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; mpg %&gt;% .[&quot;manufacturer&quot;] %&gt;% head() ## # A tibble: 6 × 1 ## manufacturer ## &lt;chr&gt; ## 1 audi ## 2 audi ## 3 audi ## 4 audi ## 5 audi ## 6 audi [[ ]]と[ ]は，それぞれ[[と[という関数であるため，以下のように書くことができる． この場合，第1引数がパイプの前から引き継がれるため，.を明示する必要がない． mpg %&gt;% `$`(manufacturer) %&gt;% head() ## [1] &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; mpg %&gt;% `[[`(&quot;manufacturer&quot;) %&gt;% head() # mpg %&gt;% `[[`(., &quot;manufacturer&quot;) と同じ ## [1] &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; &quot;audi&quot; mpg %&gt;% `[`(&quot;manufacturer&quot;) %&gt;% head() ## # A tibble: 6 × 1 ## manufacturer ## &lt;chr&gt; ## 1 audi ## 2 audi ## 3 audi ## 4 audi ## 5 audi ## 6 audi "],["stringr.html", "Chap. 6 stringrで文字列操作 6.1 はじめに 6.2 stringrとbase 6.3 準備 6.4 stringrの関数 6.5 stringrの利点", " Chap. 6 stringrで文字列操作 6.1 はじめに stringrはstringiパッケージのラッパー関数群である． stringiは文字列操作の関数群で，文字コードの変換なども含む多様な関数を含んでいる． 通常のユーザの文字列操作なら，stringrで大丈夫なことが多い． 万が一，込み入った文字列操作が必要なときは，stringiの関数を探してみると良いかもしれない． stringrには， 6.2 stringrとbase 6.2.1 baseパッケージ 6.2.2 stringrパッケージ 6.3 準備 install.packages(&quot;stringr&quot;) library(stringr) 6.4 stringrの関数 6.5 stringrの利点 少なくとも自分の経験では，stringrだけで操作が完結することはほとんどない． 逆に，パッケージ開発をしていてstringr(やdplyr)を使わずに一日が終わることもあまりない． つまり，stringrはかなり便利で必要不可欠なツールである． もちろん，baseパッケージの同様の関数を使っても機能上は問題ないことが多い． でも，引数の指定方法に一貫性があると，コードを綺麗に書くことができる． 綺麗なコードは，汚いコードよりも書きやすいし，見た目も良いし，何よりもバグが入りにくい(入らないわけではない)． "],["lubridate.html", "Chap. 7 lubridateで日付・時刻を扱う 7.1 1月後・1年後の同一日付 7.2 文字列からDateクラスへの変換 7.3 曜日を求める 7.4 活用例", " Chap. 7 lubridateで日付・時刻を扱う 年月日や曜日を扱う場合，パッケージlubridateを利用するのが便利である． lubridateは，tidyverseに含まれているパッケージの1つで，日付や時刻・時間データを扱う際には必須と言っても過言ではない． 7.1 1月後・1年後の同一日付 例えば，1月後や1年後の同一の日付を得たいとする． これは単純なようで実はややこしい問題を含んでいる． 月には大の月・小の月があるし，年には閏年がある． そのため，自分で関数を作成しようとするとややこしい． そこで，lubridateを活用して，簡単に計算する． 1年後の同一の日付を得るに日「+ years(1)」とすれば良い． 単純に365日加えるのとは結果が異なる． 1月後の場合には「months(1)」を使う library(lubridate) # tidyverseに含まれており本来不要，説明用に明示 library(tidyverse) today() + years(0:4) ## [1] &quot;2023-05-05&quot; &quot;2024-05-05&quot; &quot;2025-05-05&quot; &quot;2026-05-05&quot; &quot;2027-05-05&quot; today() + days(365 * 0:4) ## [1] &quot;2023-05-05&quot; &quot;2024-05-04&quot; &quot;2025-05-04&quot; &quot;2026-05-04&quot; &quot;2027-05-04&quot; today() + months(0:11) ## [1] &quot;2023-05-05&quot; &quot;2023-06-05&quot; &quot;2023-07-05&quot; &quot;2023-08-05&quot; &quot;2023-09-05&quot; ## [6] &quot;2023-10-05&quot; &quot;2023-11-05&quot; &quot;2023-12-05&quot; &quot;2024-01-05&quot; &quot;2024-02-05&quot; ## [11] &quot;2024-03-05&quot; &quot;2024-04-05&quot; today() + months(0:11) ## [1] &quot;2023-05-05&quot; &quot;2023-06-05&quot; &quot;2023-07-05&quot; &quot;2023-08-05&quot; &quot;2023-09-05&quot; ## [6] &quot;2023-10-05&quot; &quot;2023-11-05&quot; &quot;2023-12-05&quot; &quot;2024-01-05&quot; &quot;2024-02-05&quot; ## [11] &quot;2024-03-05&quot; &quot;2024-04-05&quot; 7.2 文字列からDateクラスへの変換 日本語の表記でよく出てくる年・月・日の順の日付表記は，関数ymd()でDateクラスに変換できる． ymd()は，日付っぽい文字列などをDateクラスにしてくれる． ふつうに使うような以下の文字列は，普通に変換してくれる． ちなみに，日付の後ろに「(月)」のような曜日が入っていても問題ない(曜日は無視される)． 2023年4月10日 2023-4-10 2023_4_10 20230410 2023/4/10 c(&quot;2023年4月10日&quot;, &quot;2023-4-10&quot;, &quot;2023_4_10&quot;, &quot;20230410&quot;, &quot;2023/4/10&quot;) %&gt;% ymd() ## [1] &quot;2023-04-10&quot; &quot;2023-04-10&quot; &quot;2023-04-10&quot; &quot;2023-04-10&quot; &quot;2023-04-10&quot; c(&quot;2023年4月10日(月)&quot;, &quot;2023-4-10(月)&quot;, &quot;2023_4_10(月)&quot;, &quot;20230410(月)&quot;, &quot;2023/4/10(月)&quot;) %&gt;% ymd() ## [1] &quot;2023-04-10&quot; &quot;2023-04-10&quot; &quot;2023-04-10&quot; &quot;2023-04-10&quot; &quot;2023-04-10&quot; 年が入っていない場合はうまくいかないので，年を追加する必要がある． c(&quot;4月10日&quot;, &quot;4/10&quot;) %&gt;% ymd() ## Warning: All formats failed to parse. No formats found. ## [1] NA NA c(&quot;4月10日&quot;, &quot;4/10&quot;) %&gt;% paste0(&quot;2023-&quot;, .) %&gt;% ymd() ## [1] &quot;2023-04-10&quot; &quot;2023-04-10&quot; ここでは日付を中心に扱うが，時刻の計算もうまくやってくれる． ymd_hms(&quot;2023-5-1-12-23-34&quot;) %&gt;% print() %&gt;% `+`(minutes(40)) ## [1] &quot;2023-05-01 12:23:34 UTC&quot; ## [1] &quot;2023-05-01 13:03:34 UTC&quot; 7.3 曜日を求める 日付をもとにwday()を用いて曜日を求めることができる． ただし，デフォルトでは日曜日を「1」，月曜日を「2」のように日曜始まりの場合での曜日番号を示す． 「label = TRUE」とすると，factorとしての曜日を返してくれる． x &lt;- today() wday(x) # week of the day ## [1] 6 wday(x, label = TRUE) ## [1] 金 ## Levels: 日 &lt; 月 &lt; 火 &lt; 水 &lt; 木 &lt; 金 &lt; 土 7.4 活用例 日付固定(同じ月日)あるいは位置固定(n月の第nのn曜日)のときでの一年後の年月日を求めることを考える． 日付固定の場合は，既に説明したように非常に簡単に求められる． x &lt;- today() x + years(1) ## [1] &quot;2024-05-05&quot; 位置固定の場合は，関数を作成する必要がある． 年月日から第何の何曜日か分からなければ，位置を固定できない． 曜日はwday()で求められるため，第何の曜日かを求める関数が必要だ． mweek &lt;- function(x){ (mday(x) - 1) %/% 7 + 1 } mday()で月の中で何日目か計算し(つまりday()と同じ)，そこから1日引いた数字を7で割る． 7で割ったときに第1の曜日は1未満，第2の曜日は1以上2未満であるため，7で割ったときの商に1を足す． これで第何の曜日かがわかる． real &lt;- seq(as.POSIXct(&quot;2020-10-1&quot;), as.POSIXct(&quot;2020-10-31&quot;), by=&quot;day&quot;) %&gt;% mweek() expect &lt;- rep(1:5, each=7)[1:31] sum(real != expect, na.rm = TRUE) ## [1] 0 # testthat::expect_equal(real, expect) 念のため，パッケージtestthatで確認する． testthat::expect_equal()の結果として，何も出力されなければテストを通過したことが分かる． 次に，年月日から1年後の 年と月を分離してそこから求めたい月の1日をbaseの日付とする． 1日から7日までは第1，8日から14日までは第2なので，baseに「mweek(x) - 1) * 7」を足してやる． さらに，これに曜日の補正をするため，baseと元の日付(x)との曜日の差を追加する． ただし，差が負の場合は7から引いて正にする． なお，「for(i in seq_along(diff))」でループしている部分は，ベクトルへの対応である． 入力が1日だけの場合は必要ないが，他の部分がベクトルに対応おり，せっかくなので複数の日付(Dateクラスのベクトル)を受け入れるようにした． これで，一応出来上がった． ただし，第5の曜日の場合は，次の月にずれてしまっている可能性がある． そこで，月がずれていないか確認して，ずれている場合は「NA」を返す． same_pos_next_yr &lt;- function(x){ yr &lt;- year(x) mn &lt;- month(x) base &lt;- ymd(paste0(yr + 1, &quot;-&quot;, mn, &quot;-&quot;, 1)) diff &lt;- wday(x) - wday(base) for(i in seq_along(diff)){ if(diff[i] &lt; 0){ diff[i] &lt;- diff[i] + 7 } } same_pos &lt;- base + (mweek(x) - 1) * 7 + diff for(i in seq_along(same_pos)){ if(month(same_pos[i]) != mn[i]){ same_pos[i] &lt;- NA warning(&quot;No same position day with &quot;, x[i], &quot;!&quot;) } } return(same_pos) } 実際の日付で確認してみる． days &lt;- today() + (0:30) days_n &lt;- same_pos_next_yr(days) ## Warning in same_pos_next_yr(days): No same position day with 2023-05-29! ## Warning in same_pos_next_yr(days): No same position day with 2023-05-30! days ## [1] &quot;2023-05-05&quot; &quot;2023-05-06&quot; &quot;2023-05-07&quot; &quot;2023-05-08&quot; &quot;2023-05-09&quot; ## [6] &quot;2023-05-10&quot; &quot;2023-05-11&quot; &quot;2023-05-12&quot; &quot;2023-05-13&quot; &quot;2023-05-14&quot; ## [11] &quot;2023-05-15&quot; &quot;2023-05-16&quot; &quot;2023-05-17&quot; &quot;2023-05-18&quot; &quot;2023-05-19&quot; ## [16] &quot;2023-05-20&quot; &quot;2023-05-21&quot; &quot;2023-05-22&quot; &quot;2023-05-23&quot; &quot;2023-05-24&quot; ## [21] &quot;2023-05-25&quot; &quot;2023-05-26&quot; &quot;2023-05-27&quot; &quot;2023-05-28&quot; &quot;2023-05-29&quot; ## [26] &quot;2023-05-30&quot; &quot;2023-05-31&quot; &quot;2023-06-01&quot; &quot;2023-06-02&quot; &quot;2023-06-03&quot; ## [31] &quot;2023-06-04&quot; days_n ## [1] &quot;2024-05-03&quot; &quot;2024-05-04&quot; &quot;2024-05-05&quot; &quot;2024-05-13&quot; &quot;2024-05-14&quot; ## [6] &quot;2024-05-08&quot; &quot;2024-05-09&quot; &quot;2024-05-10&quot; &quot;2024-05-11&quot; &quot;2024-05-12&quot; ## [11] &quot;2024-05-20&quot; &quot;2024-05-21&quot; &quot;2024-05-15&quot; &quot;2024-05-16&quot; &quot;2024-05-17&quot; ## [16] &quot;2024-05-18&quot; &quot;2024-05-19&quot; &quot;2024-05-27&quot; &quot;2024-05-28&quot; &quot;2024-05-22&quot; ## [21] &quot;2024-05-23&quot; &quot;2024-05-24&quot; &quot;2024-05-25&quot; &quot;2024-05-26&quot; NA ## [26] NA &quot;2024-05-29&quot; &quot;2024-06-06&quot; &quot;2024-06-07&quot; &quot;2024-06-01&quot; ## [31] &quot;2024-06-02&quot; mweek(days) ## [1] 1 1 1 2 2 2 2 2 2 2 3 3 3 3 3 3 3 4 4 4 4 4 4 4 5 5 5 1 1 1 1 mweek(days_n) ## [1] 1 1 1 2 2 2 2 2 2 2 3 3 3 3 3 3 3 4 4 4 4 4 4 4 NA ## [26] NA 5 1 1 1 1 sum(mweek(days) != mweek(days_n), na.rm = TRUE) ## [1] 0 # testthat::expect_equal(mweek(days), mweek(days_n)) wday(days) ## [1] 6 7 1 2 3 4 5 6 7 1 2 3 4 5 6 7 1 2 3 4 5 6 7 1 2 3 4 5 6 7 1 wday(days_n) ## [1] 6 7 1 2 3 4 5 6 7 1 2 3 4 5 6 7 1 2 3 4 5 6 7 1 NA ## [26] NA 4 5 6 7 1 sum(wday(days) != wday(days_n), na.rm = TRUE) ## [1] 0 # testthat::expect_equal(wday(days), wday(days_n)) 計算できているはずだが，日付だけを見てもよくわからない． 何回目の何曜日も求めて，確認すると最後の方でエラーが出ている． 第5週でのずれる部分である． ただし，閏年以外の2月だけは4週にピッタリ収まるので，エラーが出ないはずだ． テストもだいたいあっていそうだが，分かりにくいため，カレンダーを表示してみよう． library(calendR) calendR::calendR(year(x) , month(x)) calendR::calendR(year(x) + 1, month(x)) "],["ggplot2.html", "Chap. 8 ggplot2で楽に綺麗に作図 8.1 Rの作図環境の概要 8.2 ggplot2とは 8.3 ggplot2の基本 8.4 facetを使おう 8.5 ggsave 8.6 文字化けへの対処(windows) 8.7 themeを少しだけ説明 8.8 shiny 8.9 作図の自動化 8.10 参考書", " Chap. 8 ggplot2で楽に綺麗に作図 8.1 Rの作図環境の概要 Rの作図環境として主なものは以下の4つがある． base graphics lattice grid ggplot2 base graphicsは古典的な作図環境で長らく使われてきた． Rが統計解析のシステムとして使われるようになった理由の1つとして強力な作図環境があり，まさしくこのgraphicsシステムがそれに当たる． すごく便利なものと当時は考えていた． ただし，base graphicsは紙と鉛筆を使って作図していくようなものだと喩えられることがあるように，作図済みのものは修正できない． また，作図する関数によって引数の取り方が異なるなど，発展するなかで継ぎ接ぎだらけになってしまった． システムが急速に発展する中では，このような状況はよくあることで途中から綺麗に整理し直すことは困難である． 新しいシステムを作り直す方が楽であり現実的である． そのような状況もあってか，lattice，それをもとにしたgrid，さらにはこの2つをベースにしたggpot2が開発された． これら3つの作図環境のうち，最近ではggplot2が最も使われているものである． ggplot2では，Grammar of Graphics，つまり作図の文法という考え方が用いられており，洗練された作図が可能である． 詳細は「ggplot2」(Hadley )を参照して欲しい． 8.2 ggplot2とは ggplot2は，作図環境を提供するパッケージである． baseの作図環境とは異なり，統一的なインターフェスを持っており，非常に使いやすい． 散布図を作成したデータをもとにして，簡単に箱ひげ図などの他の形式の作図やグループ分けした作図も簡単である． 8.2.1 ggplot2の利点 ggplot2では，第1引数としてtidyなデータフレームを受け取る． 1つのデータから各種作図が可能 ちょっとの変更で棒グラフ，散布図，などなど各種のplotが可能 図が綺麗 テーマの変更も簡単 facetによるグループ分けも便利 magrittrによるパイプとの相性が良い 特にファイル名を設定するときの%$%や%T%など ggplot2をサポートするパッケージも豊富 凡例の自動的な位置決めや配置など ggpubrなども 8.3 ggplot2の基本 irisを例にするが，できれば，veganとかdaveのデータを使う tidy dataへの変換が必要 コードのみか，詳しくは松村や比嘉の解説を参考に gather()とspread()はpivot_longer()とpivot_wider()になって使いやすくなった． Hadley自身も使い方を混乱していたらしい aesthetics geom_point() geom_bar() aes() colour group size 8.4 facetを使おう forループやsubset，あるいはdplyr::filterを使っていたものが，一気にできて便利 コードも簡単で見やすい コードの転用が簡単 group VS facet 8.5 ggsave pngとPDF PDFで日本語文字が化ける場合は，pngを使う 指定しないと，直前のプロット 8.6 文字化けへの対処(windows) -cario? 8.7 themeを少しだけ説明 デフォルト theme_bw() 8.8 shiny shinyは必要? Rだけでウェブアプリが作れる reactiveの考え方を覚える必要あり 8.9 作図の自動化 例を示す． 入力：readr, readxl エクセルかcsvでデータ入力 分析：dplyr, stringr filter(), summarise(), tally() 作図：ggplot2 ggplot() geom_point() geom_jitter() geom_boxplot() ggsave() 8.10 参考書 ggplot2 ggplot2のレシピ unwin GDA チートシート "],["fs.html", "Chap. 9 fsでファイル操作 9.1 はじめに 9.2 shell，baseパッケージ, fsパッケージ 9.3 準備 9.4 fsの関数群 9.5 fsを使ったファイル操作例", " Chap. 9 fsでファイル操作 9.1 はじめに Windowsならコマンドプロンプト(古い言い方なら，いわゆるdos窓)，MacならTerminal，Linuxならシェルを使えば，各種ファイル操作をコマンドラインで実行できる． もちろん，マウスを使った操作でも構わないが，多くのファイルでの名前の変更やファイル名によるフォルダの振り分けなら，マウス操作よりもコマンドを使った操作が早いし確実である． なお，Windowsの場合は [Win] + [R] で「ファイル名を指定して実行」で「cmd」と入力すれば， コマンドプロンプトやバッチファイル(あるいはシェルスクリプト)などでの操作に慣れていれば，それが便利である． ただ，dosコマンドの変数の扱いは，慣れていないと結構難しい(慣れていても?)． そんなときは，Rの関数(shell()，system())を使って，dosコマンドを駆使して，ファイル名を取得・名前の変更をすることができる． 既にdosコマンドを書いていれば，shell()などを使うのは良い方法である． また，Rのbaseパッケージにはファイル操作のための関数が多くある． 例えば，list.files()でファイル名一覧を取得でき，file.rename()でファイル名の変更ができる． しかし，baseの関数群の中には名前が分かりにくい点や引数の一貫性が無い点などの難点がある． これは，Rが発展していく中で徐々に関数が追加されたことによるようだ． fsパッケージでは，baseの関数群を整理するとともに，新たな有用な関数が追加されている． そのため，命名規則が一貫しており，ベクトル化した引数を受け付けるため，非常に使いやすい． 複数のOSを使う場合は，コマンドが異なるためそれぞれでコマンドを覚えなければならない． いちいち個別のものを覚えるよりも，fsパッケージの関数を覚えておけば，どのOSであろうが同じように動作してくれて楽ができる． なお，fs，base，shellの詳細な比較が，以下のURLにあるので，参照してほしい． https://cran.r-project.org/web/packages/fs/vignettes/function-comparisons.html 9.2 shell，baseパッケージ, fsパッケージ a.pdf, b.pdf, …, j.pdfを01.pdf, 02.pdf, …, 10.pdfのように10個のファイル名を変更したいとする． 9.2.1 shellを使う shellなら，以下のようなコマンドだ． dosコマンドの変数やループなどを駆使すると，もっと短く書けるのかもしれないが，残念ながらそのような知識がない． テキストファイルで書いてもそれほど時間がからないだろうが，ファイル数が多くなれば大変だ． rename a.pdf 01.pdf rename b.pdf 02.pdf rename c.pdf 03.pdf ... rename j.pdf 10.pdf 9.2.2 baseパッケージ 基本的にtidyverseの関数群を使わず，できるだけRの標準の関数を使った例を示す． sprintf()は使い慣れていないと，どのように指定するべきか分かりにくい． old &lt;- paste0(letters[1:10], &quot;.pdf&quot;) new &lt;- paste0(sprintf(&quot;%02.f&quot;, 1:10), &quot;.pdf&quot;) file.rename(old, new) 9.2.3 fsパッケージ fsパッケージとともに，stringrを使った例を示す． ファイル操作をする際には，文字列の置換・検索などをすることが多いので，stringrが役立つ． stringrパッケージの関数は，str_の名前になっているため，覚えやすい． fsパッケージの関数は，パス操作はpath_，ディレクトリ操作はdir_，ファイル操作はfile_という名前がついている． library(stringr) old &lt;- str_c(letters[1:10], &quot;.pdf&quot;) new &lt;- str_c(str_pad(1:10, width = 2, side = &quot;left&quot;, pad = &quot;0&quot;), &quot;.pdf&quot;) file_move(old, new) 9.3 準備 install.packages(&quot;fs&quot;) library(fs) 9.4 fsの関数群 パス操作(path_)，ディレクトリ操作(dir_)，ファイル操作(file_*)の関数群に分けることができる． パス操作には，baseやshellにはない機能が多くあって，使いやすい． 拡張子を取り除くた関数を自作したことがあるが，同じような関数(しかもおそらく，fsのほうがしっかりしている)があることを見つけたときには， 下位機能の車輪を再発明してしまったと後悔した． fs，base，shellの比較は次のURLを参照して欲しい． https://cran.r-project.org/web/packages/fs/vignettes/function-comparisons.html 9.4.1 パス操作 パス操作では，stringrを駆使して自作しないといけないような関数が多くある． 特に，パスからディレクトリ名，ファイル名，拡張子を抽出してくれる関数は便利だ． 自作してもそれほど難しくはないが，(少なくとも自分の)自作した関数にはバグが入っている可能性がある． 予想外のパスを指定した場合には，予想外の結果になることがあるだろう． そのような不具合を防ぐためにも，fsパッケージのパス関数を使うほうが良さそうである． path(&quot;top_dir&quot;, &quot;nested_dir&quot;, &quot;file&quot;, ext = &quot;ext&quot;) # パス作成 path_temp(), path_temp(&quot;path&quot;) # 一時パス名の作成 path_expand(&quot;~/path&quot;) # &quot;~&quot;をユーザのホームディレクトリに変換したパス path_dir(&quot;path&quot;) # パスからディレクトリ名抽出 path_file(&quot;path&quot;) # パスからファイル名抽出 path_ext(&quot;path&quot;) # パスから拡張子抽出 path_ext_remove(&quot;path&quot;) # パスから拡張子を削除 path_home() # ホームディレクトリ path_package(&quot;pkgname&quot;, &quot;dir&quot;, &quot;file&quot;) # パッケージのパス名 path_norm(&quot;path&quot;) # 参照や&quot;..&quot;の削除 path_real(&quot;path&quot;) # 実体パス(シンボリックリンクを実体パスに) path_abs(&quot;path&quot;) # 絶対パス path_rel(&quot;path/foo&quot;, &quot;path/bar&quot;) # 相対パス path_common(c(&quot;path/foo&quot;, &quot;path/bar&quot;, &quot;path/baz&quot;)) # パスの共通部分 path_ext_set(&quot;path&quot;, &quot;new_ext&quot;) # 拡張子変更 path_sanitize(&quot;path&quot;) # 無効な文字を削除 path_join(&quot;path&quot;) # 結合 path_split(&quot;path&quot;) # 分割 9.4.2 ディレクトリ操作 shellやbaseでも同様の機能があるが，複数処理のdir_map()やツリー表示のdir_tree()は単純に嬉しい． dir_ls(&quot;path&quot;) # 一覧 dir_info(&quot;path&quot;) # 情報 dir_copy(&quot;path&quot;, &quot;new-path&quot;) # 複写 dir_create(&quot;path&quot;) # 作成 dir_delete(&quot;path&quot;) # 削除 dir_exists(&quot;path&quot;) # 有無確認 dir_move() (see file_move) # 移動 dir_map(&quot;path&quot;, fun) # 複数処理 dir_tree(&quot;path&quot;) # ツリー表示 9.4.3 ファイル操作 ファイル操作はshellやbaseとそれほど変わらない感じがする． file_chmod(&quot;path&quot;, &quot;mode&quot;) # 権限変更 file_chown(&quot;path&quot;, &quot;user_id&quot;, &quot;group_id&quot;) # 所有者変更 file_copy(&quot;path&quot;, &quot;new-path&quot;) # 複写 file_create(&quot;new-path&quot;) # 作成 file_delete(&quot;path&quot;) # 削除 file_exists(&quot;path&quot;) # 有無確認 file_info(&quot;path&quot;) # 情報 file_move(&quot;path&quot;, &quot;new-path&quot;) # 移動 file_show(&quot;path&quot;) # 開く file_touch() # アクセス時間等の変更 file_temp() # 一時ファイル名の作成 9.5 fsを使ったファイル操作例 ごく個人的なことだが，Rのバージョンアップ時にはRconsoleとRProfile.siteを古いバージョンから複製して，カスタマイズした設定を引き継いでいる． バージョンアップをそれほど頻繁にしないのであれば，手作業でコピーしてもそれほど問題はない． 普通のRユーザなら常に最新版を使わなくても良い． ただ，Rパッケージの開発をしていると，開発中のパッケージが依存しているパッケージが最新版のRで開発されている旨の警告がでることが結構ある． ごく最近までは，手作業でファイルをコピーしていたが，よく考えたらこういった作業は自動化するべきだと気づいた． そこで，fsパッケージを使ってファイルをコピーするスクリプトを作成した． # Script to copy Rconsole for updating R # RをバージョンアップしたときのRconsoleの複製スクリプト # https://gist.github.com/matutosi/6dab3918402662f081be5c17cc7f9ce2 library(fs) library(magrittr) wd &lt;- path_package(&quot;base&quot;) %&gt;% path_split() %&gt;% unlist() %&gt;% .[-c((length(.) - 2):length(.))] %&gt;% path_join() setwd(wd) dir &lt;- dir_ls() d_old &lt;- dir[length(dir)-1] d_new &lt;- dir[length(dir)] files &lt;- c(&quot;Rconsole&quot;, &quot;Rprofile.site&quot;) f_old &lt;- path(d_old, &quot;etc&quot;, files) f_new &lt;- path(d_new, &quot;etc&quot;) file_copy(f_old, f_new, overwrite = TRUE) このように，定期的あるいはバージョンアップなどに伴うファイルのコピーや移動はそれなりにあるように思う． そのような場合は，fsを活用して作業を自動化するとよいだろう． なお，fsで対応していない部分の文字列操作には，stringrを使うと便利である． "],["shell.html", "Chap. 10 shell 10.1 準備 10.2 Pythonのスクリプト実行", " Chap. 10 shell Rからシェルのコマンドを使う ファイルの移動 PDFファイルの結合 pngからPDFへ変換 手作業でも良いが，ファイル数が多かったり，作業回数が多かったりするなら，自動化するのが便利である． 例えば，ファイルの操作やちょっとしたCUIアプリをコマンドでの動作をRでやってしまおうという邪道中の邪道である． 上記の操作をする際は，LinuxやMacであればshellスクリプトとして，Windowsであればバッチファイルとしてコードを書くのが本来の方法である． しかし，shellスクリプトやバッチファイルのコマンドを体系的に勉強したことはない(その意味ではRの勉強もかなり怪しい)． ウェブの情報をもとにしつつ，なんとなくコードを書いたことはある． とはいえ変数の使い方などは特によくわからないので，ちょっとした操作にも時間がかかりそう． そこで，慣れたRを使って雑多な操作をやっつけてしまおうと考えた． 以下のような操作を自動化する． ・複数のフォルダに入ったPDFファイルを1つのPDFに結合 ・結合後のファイルを指定場所に移動 ・元ファイルを削除 なお，以下は基本的にwindowsでの操作を前提としているが，LinuxやMacでも同じあるいは類似のコマンドで代用できる可能性が高い． 日本語文字が入っていると，操作に若干手間がかかることが多い． dosコマンド ls, dir ファイル，ディレクトリの一覧を取得 move, copy, remove, rename ファイルの移動，コピー，削除, リネーム cd ディレクトリの移動 Rの関数 shell(), system() コマンドの実行 setwd() ワーキングディレクトリの設定 ディレクトリ名にスペースや日本語が入っていて，cdコマンドがうまくいかないときは，こっちのほうが便利 paste0() 文字列の結合 stringrの関数 stringiの関数 多くの関数はstringrにラッパーがあるが，文字コードの変換などはstringiの関数が必要 日本語文字を使わなければ不要 ファイル名の命名規則を決めておき，お世話にならない方が幸せ purrr::map() for loopの代わり # ファイル名を取得する関数など その他ツール concatPDF PDFの結合など(win10 OK，win11 NG) # ConcatPDF /outfile Merged.pdf File1.pdf File2.pdf File3.pdf pdftk PDFの結合など(win11 OK) pdftk File1.pdf File2.pdf File3.pdf cat output Merged.pdf ImageMagick 画像変換など 10.1 準備 10.2 Pythonのスクリプト実行 wd &lt;- &quot;D:/matu/work/tmp&quot; setwd(wd) system(&quot;c:/windows/py.exe pdf.py&quot;, intern = TRUE) shell(&quot;pdf.py&quot;) "],["rvest.html", "Chap. 11 rvestでスクレイピング 11.1 スクレイピング 11.2 rvest と RSelenium 11.3 rvestのできること 11.4 準備 11.5 HTMLの取得 11.6 必要な情報の取得 11.7 URLの生成・データの取得 11.8 地図画像の取得 11.9 複数種への対応", " Chap. 11 rvestでスクレイピング 11.1 スクレイピング ここでのスクレイピングとは，ウェブスクレイピングの省略のことで，ウェブサイトにある情報を収集することである． ウェブサイトから植生調査データを収集することはほとんどないものの，関連データの収集は可能である． 例えば，気象庁のページから気象データが収集可能である． もちろん，気象データは手動でも収集可能ではあるが，多大な手間と長い時間が必要である． 研究に必要なデータを自動で取得できれば，手間と時間の節約が可能である． そこで，本稿ではウェブでの情報収集の方法を紹介することを目的とする． 世界の各地点の気象データをプロット 情報収集にはRのパッケージであるrvestを用いる． rvestを用いて気象庁のページから世界の気象データを入手して，気候ダイアグラムを描画する． Rのパッケージ作成では，rvestを用いて作成した関数と収集したデータをまとめたパッケージの作成方法を紹介する． 著者自身，他人のためにパッケージをつくることは考えておらず，基本的には自分の研究や作業のための関数をまとめることを目的としてパッケージをいくつか作成した． 作成したら，ついでに他人にも使ってもらえれば嬉しいという程度である． 過去に作成した関数は，しばらくすると関数の引数や返り値がどのようなものであったのか忘れてしまいがちである． パッケージをつくる(特にCRANに登録する)には，引数，返り値，使用例などをまとめる必要がある． きっちりまとめなくても良いのではあるが，決まった形式の方がむしろまとめやすい． また，RStudioとusethis, testthat, devtoolsなどのパッケージを使ってパッケージ開発すると，各種チェックやテストが可能である． 各種チェックやテストでたくさんのエラーを見ると，チェックやテストは正直なところ煩わしいと感じる． 特に，パケージ開発に慣れていないと特にそうである． しかし，チェックやテストをすることで，関数の完成度を確実に高めることができるため，パッケージとしてまとめる利点である． 11.2 rvest と RSelenium スクレイピングをするために使われる主なRのパッケージとしては，rvestとRSeleniumがある． rvestは，静的なサイトを対象とするときに役立つ． つまり，URLを指定すれば対象のサイトのページが決まるときである． 気象庁での気象データを提供しているページがこれに当たる． 一方，RSeleniumは動的なサイトを対象とするときに役立つ． 例えば，テキストボックスへのデータ入力やプルダウンメニューの選択あるいはその後のマウス操作でページが遷移する場合である． このような動的なサイトでは，Seleniumだけでなく，Javascriptを部分的に用いるのも効果的である． なお，rvestでもユーザ名とパスワードを用いた一般的なログインは可能である． また，politeパッケージと組み合わせることである程度の動的なサイトのスクレイピングは可能である． 11.3 rvestのできること HTMLの取得 DOMの取得: id, class, tagNameなどを用いる tableの取得 HTML内の取得したいデータはtableにあることが多いため，非常に便利 そもそも，tableでないデータを取得するのは非常に不便 リンクの取得 ページ遷移に使用する stringrと組み合わせて使うと良い 文字コードの変換にはstringiを用いる tidyverseやmagrittrとの合せ技が便利 Formの入力・選択 radioボタンはちょっと工夫が必要 -moranajp::html_radio_set() 無理やりな感じではあるが，同一名称のradioボタンを全て同じ値に変更する 本来なら，不要なradioボタンのフォームを削除 可能だが，インデクスがずれるので結構厄介 politeパッケージとの連携 使えば便利だが，ここでは説明せず 11.4 準備 例によってrvestをインストールする． curlとpoliteパッケージは少しだけ使うので予めインストールしておく． tidyverseは既にインストールしているはずだが，まだの場合はインストールする． install.packages(&quot;rvest&quot;) install.packages(&quot;curl&quot;) install.packages(&quot;polite&quot;) # install.packages(&quot;moranajp&quot;) # install.packages(&quot;tidyverse&quot;) # 未インストールの場合 library(rvest) library(tidyverse) 11.5 HTMLの取得 スクレイピングによってデータを取得するには，取得したいページのURLを特定しなければならない． 静的なページあるいは固定されたURLであれば，ブラウザのアドレスバーにあるURLをそのまま使えば良い． 動的あるいは特定の規則に従ったURLであれば，取得したいページのURLの規則性を知らなければならない． ここでは，「日本のレッドデータ検索システム」から都道府県のRDB指定状況とその地図情報の画像を入手することを考える． http://jpnrdb.com/search.php?mode=spec まずはブラウザでページにアクセス，手作業で検索，指定状況とその地図情報の画像を入手してみる． 上記URLで例として示されているニッコウキスゲをキーワード(種名)として入力すると，ページ遷移する． アドレスバーにはカタカナがそのまま表示されている． しかし，アドレスをコピーしてテキストエディタに貼り付けると文字化けしたようになる． これはURLエンコードによってコード変換された結果であるが安心して欲しい． rvestを使ってHTMLを取得するときには，日本語をそのまま使用することができる． 上記のURLのうち「 http://jpnrdb.com/search.php?mode= 」まではここで使用するページに共通する部分であるため，mainとしておく． 検索したい種名は変更する部分で，とりあえずspに入れておく． キーワード検索の命令(phpによるクエリ)と種名の文字列を結合し，さらにmainと結合する． これで得たURLをread_html()に与えると，ページのHTMLを得ることができる． main &lt;- &quot;http://jpnrdb.com/search.php?mode=&quot; sp &lt;- &quot;ニッコウキスゲ&quot; find_sp &lt;- paste0(&quot;key&amp;q=&quot;, sp) html &lt;- paste0(main, find_sp) %&gt;% rvest::read_html() html ## {html_document} ## &lt;html&gt; ## [1] &lt;body&gt;\\n&lt;em&gt;&lt;/em&gt;\\n\\n&lt;title&gt;日本のレッドデータ検索システム&lt;/title&gt;\\n&lt;meta http-equiv=&quot;co ... 11.6 必要な情報の取得 取得したHTMLには必要な情報が含まれているが，そのままの状態では使い物にならない． また，文字列に変換してstringrを駆使すれば，情報を得ることはできるだろうが，多大な苦労が待っている． as.character(html) ## [1] &quot;&lt;!DOCTYPE html PUBLIC \\&quot;-//W3C//DTD HTML 4.0 Transitional//EN\\&quot; \\&quot;http://www.w3.org/TR/REC-html40/loose.dtd\\&quot;&gt;\\n&lt;html&gt;&lt;body&gt;\\n&lt;em&gt;&lt;/em&gt;\\n\\n&lt;title&gt;日本のレッドデータ検索システム&lt;/title&gt;\\n&lt;meta http-equiv=\\&quot;content-type\\&quot; content=\\&quot;text/html;charset=utf-8\\&quot;&gt;\\n&lt;link rel=\\&quot;stylesheet\\&quot; type=\\&quot;text/css\\&quot; media=\\&quot;all\\&quot; href=\\&quot;./rdb.css\\&quot;&gt;\\n&lt;div id=\\&quot;wrapper\\&quot;&gt;\\n&lt;!-- START HEADER --&gt;\\n&lt;div id=\\&quot;header\\&quot;&gt;&lt;h1&gt;日本のレッドデータ検索システム&lt;/h1&gt;&lt;/div&gt;\\n&lt;a href=\\&quot;index.html\\&quot;&gt;&lt;img src=\\&quot;pic/images/header_top_01.gif\\&quot; border=\\&quot;0\\&quot;&gt;&lt;/a&gt;&lt;img src=\\&quot;pic/images/header_top_02.gif\\&quot;&gt;&lt;!-- START CONTENTS --&gt;&lt;!-- レッドデータについて --&gt;&lt;div align=\\&quot;center\\&quot;&gt;\\n &lt;table width=\\&quot;780px\\&quot; cellspacing=\\&quot;0\\&quot; cellpadding=\\&quot;0\\&quot;&gt;&lt;tr&gt;\\n&lt;td&gt;\\n&lt;a href=\\&quot;rdb_category.html\\&quot;&gt;&lt;img src=\\&quot;pic/images/header_top_03.gif\\&quot; alt=\\&quot;レッドデータカテゴリ\\&quot; width=\\&quot;140\\&quot; height=\\&quot;48\\&quot; border=\\&quot;0px\\&quot; title=\\&quot;レッドデータカテゴリ\\&quot;&gt;&lt;/a&gt;&lt;a href=\\&quot;history.html\\&quot;&gt;&lt;img src=\\&quot;pic/images/header_top_04.gif\\&quot; alt=\\&quot;レッドデータの歴史\\&quot; width=\\&quot;140\\&quot; height=\\&quot;48\\&quot; border=\\&quot;0px\\&quot; title=\\&quot;レッドデータの歴史\\&quot;&gt;&lt;/a&gt;&lt;a href=\\&quot;category.html\\&quot;&gt;&lt;img src=\\&quot;pic/images/header_top_05.gif\\&quot; alt=\\&quot;カテゴリと生物名称\\&quot; width=\\&quot;140\\&quot; height=\\&quot;48\\&quot; border=\\&quot;0px\\&quot; title=\\&quot;カテゴリと生物名称\\&quot;&gt;&lt;/a&gt;&lt;a href=\\&quot;publish.html\\&quot;&gt;&lt;img src=\\&quot;pic/images/header_top_06.gif\\&quot; alt=\\&quot;レッドデータ掲載種\\&quot; width=\\&quot;140\\&quot; height=\\&quot;48\\&quot; border=\\&quot;0px\\&quot; title=\\&quot;レッドデータ掲載種\\&quot;&gt;&lt;/a&gt;&lt;a href=\\&quot;bunken.html\\&quot;&gt;&lt;img src=\\&quot;pic/images/header_top_07.gif\\&quot; alt=\\&quot;参考文献一覧\\&quot; width=\\&quot;110\\&quot; height=\\&quot;48\\&quot; border=\\&quot;0px\\&quot; title=\\&quot;参考文献一覧\\&quot;&gt;&lt;/a&gt;&lt;a href=\\&quot;link.html\\&quot;&gt;&lt;img src=\\&quot;pic/images/header_top_08.gif\\&quot; alt=\\&quot;リンク集\\&quot; title=\\&quot;リンク集\\&quot; width=\\&quot;110\\&quot; height=\\&quot;48\\&quot; border=\\&quot;0\\&quot;&gt;&lt;/a&gt;\\n&lt;/td&gt;\\n &lt;/tr&gt;&lt;/table&gt;\\n&lt;!-- END HEADER --&gt;&lt;!-- START CONTENTS --&gt;&lt;img src=\\&quot;pic/search_title_spec.jpg\\&quot;&gt;&lt;!-- 検索履歴をセット --&gt;&lt;table width=\\&quot;780px\\&quot; cellspacing=\\&quot;0\\&quot; cellpadding=\\&quot;0\\&quot;&gt;&lt;tr&gt;\\n&lt;td height=\\&quot;5px\\&quot;&gt;&lt;div id=\\&quot;place\\&quot;&gt; &lt;a href=\\&quot;index.html\\&quot;&gt;ホーム&lt;/a&gt; | &lt;a href=\\&quot;?mode=spec\\&quot;&gt;キーワード検索&lt;/a&gt;\\r\\n &amp;gt;&amp;gt; &lt;a href=\\&quot;?mode=key&amp;amp;q=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2\\&quot;&gt;ニッコウキスゲ&lt;/a&gt;\\r\\n &amp;gt;&amp;gt; &lt;a href=\\&quot;?mode=key&amp;amp;q=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;k=06\\&quot;&gt;維管束植物&lt;/a&gt;\\n&lt;/div&gt;&lt;/td&gt;\\t\\r\\r\\n&lt;/tr&gt;&lt;/table&gt;\\n&lt;!--メニュー--&gt;&lt;table width=\\&quot;780px\\&quot; cellspacing=\\&quot;0\\&quot; cellpadding=\\&quot;1\\&quot;&gt;&lt;tr&gt;\\n&lt;td&gt; &lt;/td&gt;\\t\\r\\r\\n\\t\\t\\t &lt;td width=\\&quot;100px\\&quot;&gt;&lt;a href=\\&quot;?mode=kind\\&quot;&gt;&lt;img src=\\&quot;pic/search_btn_kind.jpg\\&quot; alt=\\&quot;分類群検索\\&quot; width=\\&quot;100\\&quot; height=\\&quot;35\\&quot; border=\\&quot;0px\\&quot; title=\\&quot;分類群検索\\&quot;&gt;&lt;/a&gt;&lt;/td&gt;\\r\\r\\n\\t\\t\\t &lt;td width=\\&quot;100px\\&quot;&gt;&lt;a href=\\&quot;?mode=region\\&quot;&gt;&lt;img src=\\&quot;pic/search_btn_pref.jpg\\&quot; alt=\\&quot;都道府県検索\\&quot; width=\\&quot;100\\&quot; height=\\&quot;35\\&quot; border=\\&quot;0px\\&quot; title=\\&quot;都道府県検索\\&quot;&gt;&lt;/a&gt;&lt;/td&gt;\\r\\r\\n\\t\\t\\t &lt;td width=\\&quot;100px\\&quot;&gt;&lt;a href=\\&quot;?mode=rank\\&quot;&gt;&lt;img src=\\&quot;pic/search_btn_rank.jpg\\&quot; alt=\\&quot;RDBカテゴリ検索\\&quot; width=\\&quot;100\\&quot; height=\\&quot;35\\&quot; border=\\&quot;0px\\&quot; title=\\&quot;RDBカテゴリ検索\\&quot;&gt;&lt;/a&gt;&lt;/td&gt;\\r\\n\\t\\t\\t &lt;td width=\\&quot;60px\\&quot;&gt;&lt;a href=\\&quot;javascript:subwin(&#39;search_help.html&#39;,&#39;window1&#39;,&#39;top=10,left=10,width=680,height=600,menubar=yes,scrollbars=yes,resizable=yes,status=yes&#39;)\\&quot; alt=\\&quot;HELP\\&quot;&gt;&lt;img src=\\&quot;pic/icon_help.gif\\&quot; border=\\&quot;0\\&quot;&gt;&lt;/a&gt;&lt;/td&gt;\\t\\t\\t \\r\\r\\n\\t\\t\\t &lt;td width=\\&quot;6px\\&quot;&gt; &lt;/td&gt;\\r\\r\\n&lt;/tr&gt;&lt;/table&gt;\\n&lt;!--/メニュー--&gt;&lt;table width=\\&quot;480\\&quot; align=\\&quot;center\\&quot; cellspacing=\\&quot;0\\&quot; cellpadding=\\&quot;0\\&quot;&gt;\\n&lt;tr&gt;\\n&lt;td width=\\&quot;80\\&quot;&gt;&lt;a href=\\&quot;?mode=key&amp;amp;q=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;subn=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;k=01\\&quot; alt=\\&quot;哺乳類の検索結果に切り替えます\\&quot; title=\\&quot;哺乳類の検索結果に切り替えます\\&quot;&gt;&lt;img src=\\&quot;./pic/mammal_t.gif\\&quot;&gt;&lt;/a&gt;&lt;/td&gt;\\r\\n\\t\\t&lt;td class=\\&quot;kind_list\\&quot; width=\\&quot;30\\&quot;&gt;（0）&lt;/td&gt;\\r\\n\\t \\r\\n\\t \\t\\t&lt;td width=\\&quot;80\\&quot;&gt;&lt;a href=\\&quot;?mode=key&amp;amp;q=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;subn=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;k=02\\&quot; alt=\\&quot;鳥類の検索結果に切り替えます\\&quot; title=\\&quot;鳥類の検索結果に切り替えます\\&quot;&gt;&lt;img src=\\&quot;./pic/bird_t.gif\\&quot;&gt;&lt;/a&gt;&lt;/td&gt;\\r\\n\\t\\t&lt;td class=\\&quot;kind_list\\&quot; width=\\&quot;30\\&quot;&gt;（0）&lt;/td&gt;\\r\\n\\t \\r\\n\\t \\t\\t&lt;td width=\\&quot;80\\&quot;&gt;&lt;a href=\\&quot;?mode=key&amp;amp;q=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;subn=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;k=03\\&quot; alt=\\&quot;両生類の検索結果に切り替えます\\&quot; title=\\&quot;両生類の検索結果に切り替えます\\&quot;&gt;&lt;img src=\\&quot;./pic/ryosei_f.gif\\&quot;&gt;&lt;/a&gt;&lt;/td&gt;\\r\\n\\t\\t&lt;td class=\\&quot;kind_list\\&quot; width=\\&quot;30\\&quot;&gt;（0）&lt;/td&gt;\\r\\n\\t \\r\\n\\t \\t\\t&lt;td width=\\&quot;80\\&quot;&gt;&lt;a href=\\&quot;?mode=key&amp;amp;q=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;subn=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;k=04\\&quot; alt=\\&quot;爬虫類の検索結果に切り替えます\\&quot; title=\\&quot;爬虫類の検索結果に切り替えます\\&quot;&gt;&lt;img src=\\&quot;./pic/hachurui_f.gif\\&quot;&gt;&lt;/a&gt;&lt;/td&gt;\\r\\n\\t\\t&lt;td class=\\&quot;kind_list\\&quot; width=\\&quot;30\\&quot;&gt;（0）&lt;/td&gt;\\t\\t\\r\\n\\t \\t \\t\\t&lt;td width=\\&quot;80\\&quot;&gt;&lt;a href=\\&quot;?mode=key&amp;amp;q=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;subn=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;k=05\\&quot; alt=\\&quot;魚類の検索結果に切り替えます\\&quot; title=\\&quot;魚類の検索結果に切り替えます\\&quot;&gt;&lt;img src=\\&quot;./pic/fish_t.gif\\&quot;&gt;&lt;/a&gt;&lt;/td&gt;\\r\\n\\t\\t&lt;td class=\\&quot;kind_list\\&quot; width=\\&quot;30\\&quot;&gt;（0）&lt;/td&gt;\\t\\t\\r\\n\\t \\t \\t\\t&lt;td width=\\&quot;80\\&quot;&gt;&lt;img src=\\&quot;./pic/ikansoku_t.gif\\&quot; alt=\\&quot;維管束植物の検索結果を表示しています\\&quot; title=\\&quot;維管束植物の検索結果を表示しています\\&quot;&gt;&lt;/td&gt;\\r\\n\\t\\t&lt;td class=\\&quot;kind_list\\&quot; width=\\&quot;30\\&quot;&gt;（2）&lt;/td&gt;\\t\\t\\r\\n\\t \\t \\t \\r\\n\\r\\n\\t&lt;/tr&gt;\\n&lt;tr&gt;\\n&lt;td width=\\&quot;80\\&quot;&gt;&lt;a href=\\&quot;?mode=key&amp;amp;q=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;subn=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;k=07\\&quot; alt=\\&quot;昆虫類の検索結果に切り替えます\\&quot; title=\\&quot;昆虫類の検索結果に切り替えます\\&quot;&gt;&lt;img src=\\&quot;./pic/konchu_f.gif\\&quot;&gt;&lt;/a&gt;&lt;/td&gt;\\r\\n\\t\\t&lt;td class=\\&quot;kind_list\\&quot; width=\\&quot;30\\&quot;&gt;（0）&lt;/td&gt;\\r\\n\\t \\t \\t\\t&lt;td width=\\&quot;80\\&quot;&gt;&lt;a href=\\&quot;?mode=key&amp;amp;q=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;subn=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;k=08\\&quot; alt=\\&quot;菌類の検索結果に切り替えます\\&quot; title=\\&quot;菌類の検索結果に切り替えます\\&quot;&gt;&lt;img src=\\&quot;./pic/kinrui_f.gif\\&quot;&gt;&lt;/a&gt;&lt;/td&gt;\\r\\n\\t\\t&lt;td class=\\&quot;kind_list\\&quot; width=\\&quot;30\\&quot;&gt;（0）&lt;/td&gt;\\t\\t\\r\\n\\t \\t \\t\\t&lt;td width=\\&quot;80\\&quot;&gt;&lt;a href=\\&quot;?mode=key&amp;amp;q=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;subn=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;k=09\\&quot; alt=\\&quot;地衣類の検索結果に切り替えます\\&quot; title=\\&quot;地衣類の検索結果に切り替えます\\&quot;&gt;&lt;img src=\\&quot;./pic/chiirui_f.gif\\&quot;&gt;&lt;/a&gt;&lt;/td&gt;\\r\\n\\t\\t&lt;td class=\\&quot;kind_list\\&quot; width=\\&quot;30\\&quot;&gt;（0）&lt;/td&gt;\\t\\t\\r\\n\\t \\t \\t \\r\\n\\t \\t\\t&lt;td width=\\&quot;80\\&quot;&gt;&lt;a href=\\&quot;?mode=key&amp;amp;q=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;subn=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;k=10\\&quot; alt=\\&quot;苔類の検索結果に切り替えます\\&quot; title=\\&quot;苔類の検索結果に切り替えます\\&quot;&gt;&lt;img src=\\&quot;./pic/koke_f.gif\\&quot;&gt;&lt;/a&gt;&lt;/td&gt;\\r\\n\\t\\t&lt;td class=\\&quot;kind_list\\&quot; width=\\&quot;30\\&quot;&gt;（0）&lt;/td&gt;\\t\\t\\r\\n\\t \\r\\n\\t \\t\\t&lt;td width=\\&quot;80\\&quot;&gt;&lt;a href=\\&quot;?mode=key&amp;amp;q=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;subn=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;k=11\\&quot; alt=\\&quot;無脊椎動物の検索結果に切り替えます\\&quot; title=\\&quot;無脊椎動物の検索結果に切り替えます\\&quot;&gt;&lt;img src=\\&quot;./pic/musekitui_f.gif\\&quot;&gt;&lt;/a&gt;&lt;/td&gt;\\r\\n\\t\\t&lt;td class=\\&quot;kind_list\\&quot; width=\\&quot;30\\&quot;&gt;（0）&lt;/td&gt;\\r\\n\\t \\t\\t \\r\\n\\t \\t\\t&lt;td width=\\&quot;80\\&quot;&gt;&lt;a href=\\&quot;?mode=key&amp;amp;q=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;subn=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;k=12\\&quot; alt=\\&quot;藻類の検索結果に切り替えます\\&quot; title=\\&quot;藻類の検索結果に切り替えます\\&quot;&gt;&lt;img src=\\&quot;./pic/morui_f.gif\\&quot;&gt;&lt;/a&gt;&lt;/td&gt;\\r\\n\\t\\t&lt;td class=\\&quot;kind_list\\&quot; width=\\&quot;30\\&quot;&gt;（0）&lt;/td&gt;\\t\\t\\r\\n\\t \\t \\r\\n\\t&lt;/tr&gt;\\n&lt;tr&gt;\\n&lt;td colspan=\\&quot;12\\&quot; align=\\&quot;right\\&quot;&gt;()内は検索該当件数を表す&lt;/td&gt;\\r\\n\\t&lt;/tr&gt;\\n&lt;/table&gt;\\n&lt;table class=\\&quot;title_kekka\\&quot; width=\\&quot;780px\\&quot; height=\\&quot;40px\\&quot; cellspacing=\\&quot;0\\&quot; cellpadding=\\&quot;0\\&quot;&gt;\\n&lt;tr&gt;\\n&lt;td class=\\&quot;title_count\\&quot;&gt;[維管束植物] &lt;b&gt;2&lt;/b&gt;件該当データがあります&lt;/td&gt;\\n&lt;td class=\\&quot;title_link\\&quot;&gt;&lt;/td&gt;\\n&lt;/tr&gt;\\n&lt;tr&gt;&lt;td colspan=\\&quot;2\\&quot; class=\\&quot;title_link\\&quot;&gt;\\r\\n リスト形式 | &lt;a href=\\&quot;?mode=key&amp;amp;q=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;disp=thumb\\&quot; alt=\\&quot;検索結果を地図表示形式で表示します\\&quot; title=\\&quot;検索結果を地図表示形式で表示します\\&quot;&gt;地図表示形式&lt;/a&gt;\\r\\n &lt;/td&gt;&lt;/tr&gt;\\n&lt;/table&gt;\\n&lt;div id=\\&quot;list\\&quot; style=\\&quot;display:inline\\&quot;&gt;\\r\\n&lt;table class=\\&quot;table_kekka\\&quot; width=\\&quot;780px\\&quot; border=\\&quot;0\\&quot; cellspacing=\\&quot;1\\&quot; align=\\&quot;center\\&quot;&gt;\\n&lt;tr&gt;\\n&lt;th class=\\&quot;list_midashi\\&quot;&gt;目録No&lt;a href=\\&quot;?mode=key&amp;amp;q=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;s=cta\\&quot; alt=\\&quot;目録Noの小さい順に表示します\\&quot; title=\\&quot;目録Noの小さい順に表示します\\&quot;&gt;▲&lt;/a&gt;&lt;a href=\\&quot;?mode=key&amp;amp;q=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;s=ctd\\&quot; alt=\\&quot;目録Noの大きい順に表示します\\&quot; title=\\&quot;目録Noの大きい順に表示します\\&quot;&gt;▼&lt;/a&gt;\\n&lt;/th&gt;\\r\\n\\t\\t&lt;th class=\\&quot;list_midashi\\&quot;&gt;上位分類群&lt;a href=\\&quot;?mode=key&amp;amp;q=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;s=oda\\&quot; alt=\\&quot;目名のアイウエオ順にソートします\\&quot; title=\\&quot;目名のアイウエオ順にソートします\\&quot;&gt;▲&lt;/a&gt;&lt;a href=\\&quot;?mode=key&amp;amp;q=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;s=odd\\&quot; alt=\\&quot;目名のアイウエオの逆順にソートします\\&quot; title=\\&quot;目名のアイウエオの逆順にソートします\\&quot;&gt;▼&lt;/a&gt;\\n&lt;/th&gt;\\r\\n\\t\\t&lt;th class=\\&quot;list_midashi\\&quot;&gt;科名&lt;a href=\\&quot;?mode=key&amp;amp;q=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;s=fma\\&quot; alt=\\&quot;科名をアイウエオ順にソートします\\&quot; title=\\&quot;科名をアイウエオ順にソートします\\&quot;&gt;▲&lt;/a&gt;&lt;a href=\\&quot;?mode=key&amp;amp;q=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;s=fmd\\&quot; alt=\\&quot;科名をアイウエオの逆順にソートします\\&quot; title=\\&quot;科名をアイウエオの逆順にソートします\\&quot;&gt;▼&lt;/a&gt;\\n&lt;/th&gt;\\r\\n\\t\\t&lt;th class=\\&quot;list_midashi\\&quot;&gt;和名&lt;a href=\\&quot;?mode=key&amp;amp;q=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;s=jpa\\&quot; alt=\\&quot;和名をアイウエオ順にソートします\\&quot; title=\\&quot;和名をアイウエオ順にソートします\\&quot;&gt;▲&lt;/a&gt;&lt;a href=\\&quot;?mode=key&amp;amp;q=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;s=jpd\\&quot; alt=\\&quot;和名をアイウエオの逆にソートします\\&quot; title=\\&quot;和名をアイウエオの逆順にソートします\\&quot;&gt;▼&lt;/a&gt;／学名\\r\\n\\t\\t &lt;a href=\\&quot;?mode=key&amp;amp;q=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;s=sca\\&quot; alt=\\&quot;学名をアルファベット順にソートします\\&quot; title=\\&quot;学名をアルファベット順にソートします\\&quot;&gt;▲&lt;/a&gt;&lt;a href=\\&quot;?mode=key&amp;amp;q=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;s=scd\\&quot; alt=\\&quot;学名をアルファベット逆順にソートします\\&quot; title=\\&quot;学名をアルファベット逆順にソートします\\&quot;&gt;▼&lt;/a&gt;\\n&lt;/th&gt;\\r\\n\\t\\t&lt;th class=\\&quot;list_midashi\\&quot;&gt;指定都道府県数&lt;a href=\\&quot;?mode=key&amp;amp;q=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;s=cnd\\&quot; alt=\\&quot;RDB指定都道府県の少ない順にソートします\\&quot; title=\\&quot;RDB指定都道府県の少ない順にソートします\\&quot;&gt;▲&lt;/a&gt;&lt;a href=\\&quot;?mode=key&amp;amp;q=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;s=cna\\&quot; alt=\\&quot;RDB指定都道府県の多い順にソートします\\&quot; title=\\&quot;RDB指定都道府県の多い順にソートします\\&quot;&gt;▼&lt;/a&gt;\\n&lt;/th&gt;\\r\\n\\t\\t&lt;th class=\\&quot;list_midashi\\&quot;&gt;環境省&lt;a href=\\&quot;?mode=key&amp;amp;q=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;s=ena\\&quot; alt=\\&quot;環境省カテゴリの低い順にソートします\\&quot; title=\\&quot;環境省カテゴリの低い順にソートします\\&quot;&gt;▲&lt;/a&gt;&lt;a href=\\&quot;?mode=key&amp;amp;q=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;s=end\\&quot; alt=\\&quot;環境省カテゴリの高い順にソートします\\&quot; title=\\&quot;環境省カテゴリの高い順にソートします\\&quot;&gt;▼&lt;/a&gt;\\n&lt;/th&gt;\\r\\n\\t&lt;/tr&gt;\\n&lt;tr&gt;\\n&lt;td class=\\&quot;list_kazu\\&quot; width=\\&quot;15%\\&quot; align=\\&quot;right\\&quot;&gt;5266 &lt;/td&gt;\\t\\r\\n\\t\\t&lt;td class=\\&quot;list\\&quot; width=\\&quot;30%\\&quot;&gt;単子葉類&lt;/td&gt;\\r\\n\\t\\t&lt;td class=\\&quot;list\\&quot; width=\\&quot;15%\\&quot;&gt;\\r\\n\\t\\t\\t\\t\\t&lt;a href=\\&quot;?mode=key&amp;amp;q=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;t=f&amp;amp;cd=0605009\\&quot; alt=\\&quot;科名でデータを絞り込みます\\&quot; title=\\&quot;科名でデータを絞り込みます\\&quot;&gt;ユリ&lt;/a&gt;\\r\\n\\t\\t\\t\\t&lt;/td&gt;\\r\\n\\t\\t&lt;td class=\\&quot;list\\&quot; width=\\&quot;30%\\&quot;&gt;\\r\\n\\t\\t\\t&lt;a href=\\&quot;?mode=map&amp;amp;q=06050095266\\&quot; alt=\\&quot;種の詳細情報を表示します\\&quot; title=\\&quot;種の詳細情報を表示します\\&quot;&gt;ゼンテイカ&lt;/a&gt;&lt;br&gt;&lt;em&gt;  Hemerocallis middendorfii var. esculenta&lt;/em&gt;\\r\\n\\t\\t&lt;/td&gt;\\r\\n\\t\\t&lt;td class=\\&quot;list_kazu\\&quot; width=\\&quot;10%\\&quot;&gt;6&lt;/td&gt;\\r\\n\\t\\t&lt;td class=\\&quot;list_kazu\\&quot; width=\\&quot;80px\\&quot;&gt;\\r\\n\\t\\t&lt;center&gt;-&lt;center&gt;\\t\\t&lt;/center&gt;\\n&lt;/center&gt;\\n&lt;/td&gt;\\t\\t\\r\\n\\t\\t\\t\\t\\r\\n\\t&lt;/tr&gt;\\n&lt;tr&gt;\\n&lt;td class=\\&quot;list_kazu\\&quot; width=\\&quot;15%\\&quot; align=\\&quot;right\\&quot;&gt;5259 &lt;/td&gt;\\t\\r\\n\\t\\t&lt;td class=\\&quot;list\\&quot; width=\\&quot;30%\\&quot;&gt;単子葉類&lt;/td&gt;\\r\\n\\t\\t&lt;td class=\\&quot;list\\&quot; width=\\&quot;15%\\&quot;&gt;\\r\\n\\t\\t\\t\\t\\t&lt;a href=\\&quot;?mode=key&amp;amp;q=%E3%83%8B%E3%83%83%E3%82%B3%E3%82%A6%E3%82%AD%E3%82%B9%E3%82%B2&amp;amp;t=f&amp;amp;cd=0605009\\&quot; alt=\\&quot;科名でデータを絞り込みます\\&quot; title=\\&quot;科名でデータを絞り込みます\\&quot;&gt;ユリ&lt;/a&gt;\\r\\n\\t\\t\\t\\t&lt;/td&gt;\\r\\n\\t\\t&lt;td class=\\&quot;list\\&quot; width=\\&quot;30%\\&quot;&gt;\\r\\n\\t\\t\\t&lt;a href=\\&quot;?mode=map&amp;amp;q=06050095259\\&quot; alt=\\&quot;種の詳細情報を表示します\\&quot; title=\\&quot;種の詳細情報を表示します\\&quot;&gt;ニッコウキスゲ&lt;/a&gt;&lt;br&gt;&lt;em&gt;  Hemerocallis dumortieri var. esculenta&lt;/em&gt;\\r\\n\\t\\t&lt;/td&gt;\\r\\n\\t\\t&lt;td class=\\&quot;list_kazu\\&quot; width=\\&quot;10%\\&quot;&gt;3&lt;/td&gt;\\r\\n\\t\\t&lt;td class=\\&quot;list_kazu\\&quot; width=\\&quot;80px\\&quot;&gt;\\r\\n\\t\\t&lt;center&gt;-&lt;center&gt;\\t\\t&lt;/center&gt;\\n&lt;/center&gt;\\n&lt;/td&gt;\\t\\t\\r\\n\\t\\t\\t\\t\\r\\n\\t&lt;/tr&gt;\\n&lt;/table&gt;\\n&lt;/div&gt;\\r\\n &lt;div id=\\&quot;thumb\\&quot; style=\\&quot;display:none\\&quot;&gt;\\r\\n&lt;table class=\\&quot;table_kekka\\&quot; cellspacing=\\&quot;1\\&quot; cellpadding=\\&quot;0\\&quot;&gt;&lt;tr&gt;\\n&lt;td class=\\&quot;list\\&quot; width=\\&quot;250px\\&quot;&gt;\\r\\n\\t\\t \\t &lt;div&gt;\\n&lt;a href=\\&quot;?mode=map&amp;amp;q=06050095266\\&quot; alt=\\&quot;種の詳細情報を表示します\\&quot; title=\\&quot;種の詳細情報を表示します\\&quot;&gt;ゼンテイカ&lt;/a&gt;&lt;br&gt;&lt;em&gt;Hemerocallis middendorfii var. esculenta&lt;/em&gt;\\n&lt;/div&gt;\\r\\n\\t\\t &lt;div&gt;&lt;img src=\\&quot;./thumb/06/06050095266.gif\\&quot;&gt;&lt;/div&gt;\\r\\n\\t\\t &lt;/td&gt;\\r\\n\\t\\t\\r\\n\\t\\t\\t&lt;td class=\\&quot;list\\&quot; width=\\&quot;250px\\&quot;&gt;\\r\\n\\t\\t\\t&lt;div&gt;\\n&lt;a href=\\&quot;?mode=map&amp;amp;q=06050095259\\&quot; alt=\\&quot;種の詳細情報を表示します\\&quot; title=\\&quot;種の詳細情報を表示します\\&quot;&gt;ニッコウキスゲ&lt;/a&gt;&lt;br&gt;&lt;em&gt;Hemerocallis dumortieri var. esculenta&lt;/em&gt;\\n&lt;/div&gt;\\r\\n\\t\\t &lt;div&gt;&lt;img src=\\&quot;./thumb/06/06050095259.gif\\&quot;&gt;&lt;/div&gt;\\r\\n\\t\\t&lt;/td&gt;\\n&lt;/tr&gt;&lt;/table&gt;\\n&lt;/div&gt;\\r\\n&lt;br&gt;&lt;br&gt;&lt;!-- 絞りこみ検索 --&gt;&lt;div style=\\&quot;width:650px; padding: 10px;border: 1px #dcdcdc solid;\\&quot;&gt;\\r\\r\\n&lt;table width=\\&quot;490px\\&quot; border=\\&quot;0\\&quot; cellpadding=\\&quot;0\\&quot; cellspacing=\\&quot;0\\&quot;&gt;&lt;tr&gt;\\n&lt;td width=\\&quot;390px\\&quot;&gt;&lt;img src=\\&quot;pic/siborikomi_title.gif\\&quot;&gt;&lt;/td&gt;\\r\\r\\n &lt;td width=\\&quot;60px\\&quot;&gt;&lt;a href=\\&quot;javascript:subwin(&#39;search_help.html#%E7%A8%AE%E5%90%8D%E3%83%BB%E7%95%B0%E5%90%8D%E3%81%A7%E7%B5%9E%E8%BE%BC%E3%81%BF%E3%82%92%E3%81%99%E3%82%8B&#39;,&#39;window1&#39;,&#39;top=10,left=10,width=680,height=600,menubar=yes,scrollbars=yes,resizable=yes,status=yes&#39;)\\&quot; alt=\\&quot;HELP\\&quot;&gt;&lt;img src=\\&quot;pic/icon_help.gif\\&quot; border=\\&quot;0\\&quot;&gt;&lt;/a&gt;&lt;/td&gt;\\r\\r\\n &lt;/tr&gt;&lt;/table&gt;\\n&lt;img src=\\&quot;pic/spacer.gif\\&quot; width=\\&quot;10px\\&quot; height=\\&quot;15px\\&quot;&gt;&lt;form method=\\&quot;GET\\&quot; action=\\&quot;\\&quot;&gt;\\r\\n&lt;input type=\\&quot;hidden\\&quot; name=\\&quot;mode\\&quot; value=\\&quot;key\\&quot;&gt;&lt;input type=\\&quot;hidden\\&quot; name=\\&quot;k\\&quot; value=\\&quot;06\\&quot;&gt;&lt;input type=\\&quot;hidden\\&quot; name=\\&quot;t\\&quot; value=\\&quot;\\&quot;&gt;&lt;input type=\\&quot;hidden\\&quot; name=\\&quot;cd\\&quot; value=\\&quot;\\&quot;&gt;&lt;input type=\\&quot;TEXT\\&quot; name=\\&quot;q\\&quot; value=\\&quot;ニッコウキスゲ\\&quot; size=\\&quot;40\\&quot;&gt;&lt;input type=\\&quot;SUBMIT\\&quot; value=\\&quot;検索\\&quot;&gt;\\n&lt;/form&gt;\\r\\n&lt;/div&gt;\\r&lt;!-- END CONTENTS --&gt;\\n&lt;!-- START FOOTER --&gt;\\n&lt;script language=\\&quot;JavaScript\\&quot; src=\\&quot;0_use_copy.js\\&quot;&gt;&lt;/script&gt;&lt;!-- END FOOTER --&gt;\\n&lt;/div&gt;\\n&lt;!-- END wrapper --&gt;\\n&lt;map name=\\&quot;Map\\&quot;&gt;&lt;area shape=\\&quot;rect\\&quot; coords=\\&quot;21,65,202,83\\&quot; href=\\&quot;javascript:subwin(&#39;rdb_latest_sub.html&#39;,&#39;window1&#39;,&#39;top=10,left=10,width=870,height=600,menubar=yes,scrollbars=yes,resizable=yes,status=yes&#39;)\\&quot; alt=\\&quot;最新のレッドデータ情報はこちら\\&quot;&gt;&lt;/map&gt;\\n&lt;/div&gt;\\n\\n&lt;script language=\\&quot;Javascript\\&quot;&gt;\\n&lt;!--\\nfunction subwin(wurl,wname){\\n\\twindow.open(wurl,wname);\\n}\\n\\nfunction setSpecCd(specd,specname){\\n\\tdocument.specd.specd.value=specd;\\n\\tdocument.specd.specname.value=specname;\\n\\tdocument.specd.submit();\\n}\\n\\nfunction commitSpecCdFromPref(specd){\\n\\tdocument.pref_spec.specd.value=specd;\\n\\tdocument.pref_spec.submit();\\n}\\n\\nfunction commitSpecCdFromKind(specd){\\n\\tdocument.kind.specd.value=specd;\\n\\tdocument.kind.submit();\\n}\\n\\nfunction showLegend(id_vis,id_inv){\\n\\tvar vis = document.getElementById(id_vis);\\n\\tvar inv = document.getElementById(id_inv);\\n\\tinv.style.display = \\&quot;none\\&quot;;\\n\\tvis.style.display = \\&quot;inline\\&quot;;\\n\\n}\\n\\n//--&gt;\\n&lt;/script&gt;\\n&lt;/body&gt;&lt;/html&gt;\\n&quot; 幸いにしてrvestにはhtmlから要素を取得するための便利な関数が用意されている． ニッコウキスゲを検索した結果のページとその後のページの内容とURLを見ると次のような規則性があることに気づく． 検索結果のページには表(table)としてデータが含まれており，その表の中の目録Noである「5259」が指定状況や地図のページのURLに含まれている． つまり，目録Noを入手すれば指定状況や地図ページのURLを生成できる． HTMLのtableを取得するには，html_table()を使う． ここでは，6個目のtableが目録Noを含んでいる． なお，以下ではスペースの節約のためpurrr::map(colnames)として列名だけ表示しており，rvest::html_table(html)とだけするとtable全体を表示できる． rvest::html_table(html) %&gt;% purrr::map(colnames) # とりあえず，colnamesだけ表示 ## [[1]] ## [1] &quot;X1&quot; ## ## [[2]] ## [1] &quot;X1&quot; ## ## [[3]] ## [1] &quot;X1&quot; &quot;X2&quot; &quot;X3&quot; &quot;X4&quot; &quot;X5&quot; &quot;X6&quot; ## ## [[4]] ## [1] &quot;X1&quot; &quot;X2&quot; &quot;X3&quot; &quot;X4&quot; &quot;X5&quot; &quot;X6&quot; &quot;X7&quot; &quot;X8&quot; &quot;X9&quot; &quot;X10&quot; &quot;X11&quot; &quot;X12&quot; ## ## [[5]] ## [1] &quot;X1&quot; &quot;X2&quot; ## ## [[6]] ## [1] &quot;目録No▲▼&quot; ## [2] &quot;上位分類群▲▼&quot; ## [3] &quot;科名▲▼&quot; ## [4] &quot;和名▲▼／学名\\r\\n\\t\\t ▲▼&quot; ## [5] &quot;指定都道府県数▲▼&quot; ## [6] &quot;環境省▲▼&quot; ## ## [[7]] ## [1] &quot;X1&quot; &quot;X2&quot; ## ## [[8]] ## [1] &quot;X1&quot; &quot;X2&quot; rvest::html_table(html) %&gt;% `[[`(6) ## # A tibble: 2 × 6 ## `目録No▲▼` `上位分類群▲▼` `科名▲▼` 和名▲▼／学名\\r\\n\\t\\t…¹ `指定都道府県数▲▼` ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 5266 単子葉類 ユリ ゼンテイカ  Hemerocalli… 6 ## 2 5259 単子葉類 ユリ ニッコウキスゲ  Hemeroc… 3 ## # ℹ abbreviated name: ¹​`和名▲▼／学名\\r\\n\\t\\t ▲▼` ## # ℹ 1 more variable: `環境省▲▼` &lt;chr&gt; 和名としてゼンテイカとニッコウキスゲの2つが示されている． ゼンテイカはニッコウキスゲの別名である． 生物学的には同じものなので，本来は両方の情報を合わせる必要がある． 別名かどうか判定するには生物の種について考える必要があり，この問題はかなり根深くてややこしいため，ここではあえて立ち入らない． 単純に検索したものと同じ文字列の和名の目録Noを得ることを考える． tableの列名とその内容をもとにして目録Noを取得するには，dplyrのselectとfilterが便利だ． selectは列名を指定する以外に列番号を指定できるので，それを使う． さらに，filter，stringr，stringiの関数の合せ技でspと同じ文字列のnoを取り出す． 途中でちょっと面倒な点があるので補足する． separate()のsep(区切り文字)としてstringi::stri_unescape_unicode(\"\\\\u00a0\")を指定している． これは，普通の半角スペースに見えるが，No-Break Spaceと言われる改行を防ぐ特殊なスペースである． これをそのままコードに入力しても良いが，どう見ても普通のスペースと見分けがつかない． 後からコードを書く時に普通のスペースを使ってしまうと，区分しようとしてもうまくいかない． そこで，これは普通のスペースではないことを明示的に示した． また，str_detect()の引数で，paste0(\"^\", sp, \"$\")としたのは，「ニッコウキスゲ」以外にマッチさせないためである． 例えば，「ギンラン」を検索すると，「ギンラン」以外にも「エゾギンラン」と「ササバギンラン」も出てくる． この場合に正規表現の^(行頭の意味)$(行末の意味)を使うことで，「ギンラン」にしかマッチさせない． no &lt;- rvest::html_table(html) %&gt;% `[[`(6) %&gt;% dplyr::select(no = 1, wamei = 4) %&gt;% tidyr::separate(wamei, into = &quot;wamei&quot;, sep = stringi::stri_unescape_unicode(&quot;\\\\u00a0&quot;), extra = &quot;drop&quot;) %&gt;% dplyr::filter(stringr::str_detect(wamei, paste0(&quot;^&quot;, sp, &quot;$&quot;))) %&gt;% `[[`(&quot;no&quot;) 11.7 URLの生成・データの取得 目録Noが取得できれば，完成したようなものである． ブラウザで表示した地図や指定状況のURLを生成する． “map&amp;q=0605009”の詳細な意味はよくわからないが，“0605009”あたりは分類群を指定しているのだと考えられる． これに維管束植物(コケなどを除くシダ植物と花の咲く植物)の中での目録Noを結合して，さらにmainを結合するとURLの出来上がりだ． show_sp &lt;- paste0(&quot;map&amp;q=0605009&quot;, no) paste0(main, show_sp) ## [1] &quot;http://jpnrdb.com/search.php?mode=map&amp;q=06050095259&quot; html &lt;- paste0(main, show_sp) %&gt;% rvest::read_html() 生成したURLをブラウザで表示させると地図ページが表示される． 一覧表の表示にしてもURLは変更されないため，内部的に表示を変更させている可能性が高い． そこで，とりあえずHTMLからtableデータを取得してみる． html %&gt;% rvest::html_table() ## [[1]] ## # A tibble: 1 × 1 ## X1 ## &lt;lgl&gt; ## 1 NA ## ## [[2]] ## # A tibble: 1 × 1 ## X1 ## &lt;chr&gt; ## 1 &quot;ホーム | \\r\\n &gt;&gt;&quot; ## ## [[3]] ## # A tibble: 1 × 6 ## X1 X2 X3 X4 X5 X6 ## &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt; ## 1 NA NA NA NA NA NA ## ## [[4]] ## # A tibble: 49 × 5 ## `都道府県名▲▼` 和名 学名 RDBカテゴリ名 統一カテゴリ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 環境省RDB - - - &quot;&quot; ## 2 北海道 - - - &quot;&quot; ## 3 青森県 - - - &quot;&quot; ## 4 岩手県 - - - &quot;&quot; ## 5 宮城県 - - - &quot;&quot; ## 6 秋田県 - - - &quot;&quot; ## 7 山形県 - - - &quot;&quot; ## 8 福島県 - - - &quot;&quot; ## 9 茨城県 - - - &quot;&quot; ## 10 栃木県 - - - &quot;&quot; ## # ℹ 39 more rows ## ## [[5]] ## # A tibble: 8 × 13 ## ニッコウキスゲ学名：Hemerocallis dumo…¹ ニッコウキスゲ ニッコウキスゲ `学名：` ## &lt;chr&gt; &lt;chr&gt; &lt;lgl&gt; &lt;lgl&gt; ## 1 &quot;ニッコウキスゲ&quot; &quot;ニッコウキス… NA NA ## 2 &quot;学名：&quot; &quot;Hemerocallis… NA NA ## 3 &quot;分類：&quot; &quot;単子葉類 \\t\\… NA NA ## 4 &quot;登録別名：&quot; &quot;&quot; NA NA ## 5 &quot;環境省カテゴリ：&quot; &quot;なし&quot; NA NA ## 6 &quot;都道府県のRDB指定状況：&quot; &quot;&quot; NA NA ## 7 &quot;&quot; &quot;&quot; NA NA ## 8 &quot;※埼玉県・東京都・神奈川県では、季節… &quot;&quot; NA NA ## # ℹ abbreviated name: ## # ¹​`ニッコウキスゲ学名：Hemerocallis dumortieri var. esculenta分類：\\r\\n\\t\\t\\r\\n\\t\\t 単子葉類 \\t\\t\\t\\t \\t\\t\\r\\n\\t\\t\\t\\t\\t\\t \\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t ユリ科 \\t\\t\\r\\n\\t\\t登録別名：環境省カテゴリ：なし都道府県のRDB指定状況：` ## # ℹ 9 more variables: `Hemerocallis dumortieri var. esculenta` &lt;lgl&gt;, ## # `分類：` &lt;lgl&gt;, ## # `単子葉類 \\t\\t\\t\\t \\t\\t\\r\\n\\t\\t\\t\\t\\t\\t \\r\\n\\t\\t\\t\\t\\r\\n\\t\\t\\t\\t ユリ科` &lt;lgl&gt;, ## # `登録別名：` &lt;lgl&gt;, `` &lt;lgl&gt;, `環境省カテゴリ：` &lt;lgl&gt;, なし &lt;lgl&gt;, ## # `都道府県のRDB指定状況：` &lt;lgl&gt;, `` &lt;lgl&gt; ## ## [[6]] ## # A tibble: 6 × 2 ## X1 X2 ## &lt;chr&gt; &lt;chr&gt; ## 1 ニッコウキスゲ &quot;ニッコウキスゲ&quot; ## 2 学名： &quot;Hemerocallis dumortieri var. esculenta&quot; ## 3 分類： &quot;単子葉類 \\t\\t\\t\\t \\t\\t\\r\\n\\t\\t\\t\\t\\t\\t \\r\\n\\t\\t\\t\\t\\… ## 4 登録別名： &quot;&quot; ## 5 環境省カテゴリ： &quot;なし&quot; ## 6 都道府県のRDB指定状況： &quot;&quot; 果たして，tableの4番目に欲しいデータがあった． あとは，filterを使って指定されていない都道府県データを除去する． さらに必要に応じて，入手したデータを整形・変換・保存して欲しい． html %&gt;% rvest::html_table() %&gt;% `[[`(4) %&gt;% dplyr::filter(和名 != &quot;-&quot;) ## # A tibble: 4 × 5 ## `都道府県名▲▼` 和名 学名 RDBカテゴリ名 統一カテゴリ ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 &quot;埼玉県\\r\\n ※&quot; &quot;ニッ… &quot;Heme… &quot;絶滅危惧Ⅱ類… &quot;&quot; ## 2 &quot;滋賀県&quot; &quot;ニッ… &quot;Heme… &quot;分布上重要… &quot;&quot; ## 3 &quot;島根県&quot; &quot;ニッ… &quot;Heme… &quot;絶滅危惧Ⅰ類… &quot;&quot; ## 4 &quot;※埼玉県・東京都・神奈川県では、季節… &quot;※埼… &quot;※埼… &quot;※埼玉県・… &quot;※埼玉県・… 11.8 地図画像の取得 指定状況の地図画像を取得するには，まずブラウザで画像のURLを得る必要がある． GoogleChromeで画像を右クリックして，「画像アドレスをコピー」を選択する． ニッコウキスゲの場合は，以下のURLを得ることができる． http://jpnrdb.com/png/06/06050095259.png 指定状況の一覧表データのHTMLにも(ほぼ)同じものが含まれているはずである． rvestで目的とするファイルのURLを得るコードは以下のとおりである． html %&gt;% rvest::html_elements(&quot;img&quot;) %&gt;% rvest::html_attr(&quot;src&quot;) %&gt;% `[`(., stringr::str_detect(. , as.character(no))) ## [1] &quot;./png/06/06050095259.png&quot; 上のコード使用したように，rvestで便利な関数としてhtml_elements()とhtml_attr()がある． それぞれ次のようにid，class，tag，属性によってHTMLからDOMを取得可能である． html_elements() html_elements(“#id”) html_elements(“.class”) html_elements(“tag”) html_attr(“attribute”) DOMとはドキュメントオブジェクトモデルのことで，HTMLの各要素をオブジェクトとするモデルのことである． id，class，tag，属性を指定することで，効率的にオブジェクトを取り出すことができて，便利である． id，class，tag，属性についての詳細は，HTMLの解説などを別途参照していただきたい． 簡単に説明をすると，idはHTML内で一意に決定できるもので，日本のレッドデータ検索システムでは&lt;id = “header”&gt;などが使われている． classは，HTML内で複数出てくることがあり，&lt;class = “kind_list”&gt;のように指定される． tagは，上記のやを含めたすべてのタグのことで，他にも ， ， など多くの物がある． html_table()はhtml_elements(\"table\")と同等であるが，tableタグは入手したいデータを含むことが多いため個別の関数が作成されたのだろう． 属性はtagの，「href = “index.html”」の部分で，html_attr(\"href\")とすると，“index.html”を取り出すことができる． hrefが複数ある場合は，すべてを含むベクトルが返り値になる． ただし実際には，上のようにブラウザでの右クリックか，以下の手順で実行するのが手っ取り早い． - ブラウザで地図ページを表示させる - F12を押して開発者ツールを開く - 左上の□と↖の結合したアイコンをクリック後に画像をクリック - Elementsのところに出てきたURLが求めるURL - タグを右クリックして[Copy] - [Copy element] や [Copy outerHTML] で内容をコピーできる 画像のURLがわかれば，ファイルをダウンロードして保存するだけだ． これは，curlパッケージのcurl_download()で簡単にできる． 引数としてurlにはURLを，destfileにはダウンロード後のファイル名を指定する． ファイル名自体は指定が必要である． パスを指定しないと作業ディレクトリ(getwd()で取得可能)に保存されるが，作業ディレクトリ以外に保存したい場合は，相対パスや絶対パスを指定する． # wd &lt;- &quot;set_your_directory&quot; # setwd(wd) url_img &lt;- &quot;http://jpnrdb.com/png/06/06050095259.png&quot; curl::curl_download(url = url_img, destfile = paste0(sp, &quot;.png&quot;)) このようにしてスクレイピングが可能ではあるが，URLの生成規則は，変更されることがある． read_html()でHTMLが取得できない場合は，URLが正しいか確認する必要がある． また，動的なサイトでは，idが固定ではない可能性がある． サイトの仕様変更によって，タグ，クラス，その他の構造が変更されることがある点も注意しなければならない． 綺麗な構造のサイトであっても，手作業が混入していることはある． 例えば，括弧が正しく対応しているはずだと思っていても，開く側が”『“で閉じる側が”」“になっていることがあった． その場合に正規表現”『.+』“ではうまく鉤括弧内の文字列を取得できないことになる． 11.9 複数種への対応 前節のようにすれば，レッドデータへの指定状況とその地図データを得ることができる． 1種だけのデータ・画像の入手方法を紹介したが，複数種についてもこれを応用すれば可能である． その際には，forループか，purrr::mapを使うと良いだろう． 複数ページのデータを取得する場合は一般的には5秒程度の間隔を置く必要がある． ただし，サイトによってはそれ以上の間隔を求めているときがある． その内容はドメインのトップに置かれた「robots.txt」で確認できる． 「http://jpnrdb.com/」には「robots.txt」が置かれていないが，politeパッケージの関数`bow()`でスクレイピングについて調べてみる． polite::bow(&quot;http://jpnrdb.com/&quot;) ## &lt;polite session&gt; http://jpnrdb.com/ ## User-agent: polite R package ## robots.txt: 1 rules are defined for 1 bots ## Crawl delay: 5 sec ## The path is scrapable for this user-agent 「Crawl delay: 5 sec」とあるため，5秒間隔でスクレイピング可能であると思われる． これ未満の間隔でデータを頻繁に求めると，「攻撃」と見なされて接続できな状態になる可能性がある． さらに悪質なときには法的手段を取られることもありえるので，注意が必要である． ただし，http://jpnrdb.com/にrobots.txtは設置されておらず，これらはpoliteパッケージが一般的な注意として示しているに過ぎない． 大量にデータを入手する必要がある場合は，あらかじめ管理者に連絡する方が無難である． "],["rselenium.html", "Chap. 12 Rselenium 12.1 準備 12.2 ブラウザの自動化 12.3 12.4 要素の取得 12.5 その他", " Chap. 12 Rselenium Seleniumは，ブラウザを使って動的に巡回しつつ，スクレイピングをするのに適している． JavascriptやPHPなどを使って，動的に作成されるサイトでは，URLだけではページを特定することはできない． そのため，rvestだけではデータを取得するのが困難である． 12.1 準備 RSelenium: CRANからインストール Selenium: 本家サイトからインストール 注意: ver3.xxx をインストールする ver4.0 以上はRSeleniumuが対応していない(Pythonなら可) ChromeDriver 注意: 自身の利用しているブラウザのドライバが必要(バージョンも合致する必要あり) GoogleChromeは自動的にupdateされるので，バージョンをよく確認する 通常は，安定版の最新版で大丈夫である Seleniumと同じフォルダに保存する 12.2 ブラウザの自動化 12.3 12.3.1 使い方 12.3.2 注意点 12.4 要素の取得 idがわかるとき document.getElementByID() xpath document.selectQueryAll()[] 動的にサイトが作られているときには，変化する可能性があるので注意 使用されているJavaScriptの関数がわかる script &lt;- “” rem$excute(script) 例 BiSSの文字サイズの変更 主命リストの列数の変更 スクレイピングの実行時には，適切な時間間隔を空ける - 通常は5秒以上を求めていることが多い ページ遷移の命令を送信後，十分な間隔がないとHTMLの要素を取得しきれていないことがある 極端な場合，サーバーからの情報がほとんど何も送られていない，つまりページの内容がほとんど何もないことにある． この状況は，通常のマウス操作では何も表示されていないところをクリックするのと同じ状態である． サーバからの情報を待つ意味でも適度な間隔を空けるのが望ましい 動的なサイトの場合は，HTMLの構成中の可能性もある ログイン等のページでも，遷移途中のことがある． 12.5 その他 Rからシェルのコマンドを使う pngからPDFへ変換 ファイルの移動 Seleniumuの起動・終了 MeCabやGINZAの実行 "],["reticulate.html", "Chap. 13 reticulate 13.1 準備：Pythonのインストール 13.2 準備：Pythonでのモジュール(パッケージ)のインストール 13.3 13.4 実行 13.5 PythoとRとの変数のやり取り", " Chap. 13 reticulate RとPythonのパッケージは，相互に移植されていることが多い． 例えば，Pythonのlogging(とRのfutile.logger)をもとにRのパッケージloggerは開発されている． https://cran.r-project.org/web/packages/logger/index.html また，Rのggplot2やdplyrはPythonにも移植されている． ただし，どちらか片方でしか利用できなかったり，使用方法が難しいことがある． そんなとき，ちょっとだけ使うのであれば，Rのパッケージreticulateが便利である． もちろん，Pythonをちゃんと勉強するのも良いだろう． さらに，reticulateを使うとRとPythonとの変数のやり取りが簡単にできるので，本格的にPythonを使うのにも良さそう． 13.1 準備：Pythonのインストール 13.2 準備：Pythonでのモジュール(パッケージ)のインストール Rstudioでpythonを書く (reticulate) https://qiita.com/Wa__a/items/42129e529cfb6c38e046 py_install()やconda_install()でパッケージがインストールできないとき - pip でパッケージをインストール - pipでインストールできたpythonをreticulate::use_python()で指定 13.3 準備 - Pythonのインストール - pdf2docxのインストール pip install pdf2docx 13.4 実行 # pdf2docxの読み込みでエラーになるとき # reticulate::use_python()でpythonを指定 # pipでpdf2docxがインストールできたpythonを使う library(reticulate) # reticulate::py_install(&quot;pdf2docx&quot;) エラー # https://anaconda.org/conda-forge/python-docx # reticulate::conda_install(channel = &quot;conda-forge&quot;, packages = &quot;python-docx&quot;) # できたけど，pdf2docxは読み込めず reticulate::use_python(&quot;C:/Python/Python39/python.exe&quot;) reticulate::py_run_string(&quot;from pdf2docx import parse&quot;) reticulate::py_run_string(&quot;pdf_file = &#39;D:/a.pdf&#39;&quot;) reticulate::py_run_string(&quot;docx_file = &#39;D:/a.docx&#39;&quot;) reticulate::py_run_string(&quot;parse(pdf_file, docx_file)&quot;) 13.5 PythoとRとの変数のやり取り variableは変数名 # RからPythonへ(Pythonで取り出し) r.variable # PythonからRへ(Rで取り出し) py$variable "],["dbi.html", "Chap. 14 DBIでデータ取得 14.1 データベースとの連携 14.2 DBIでできること 14.3 準備 14.4 使い方", " Chap. 14 DBIでデータ取得 14.1 データベースとの連携 リレーショナル・データベースと接続してデータを取得するためのパッケージには色々とある． CRAN Task View: Databases with R には多くのパッケージが掲載されている． https://cran.r-project.org/web/views/Databases.html どれを使っても良いが，よく使われているのはDBIのようだ． https://cran.r-project.org/web/packages/DBI/index.html 14.2 DBIでできること 各種データベースとの接続 SQLによるデータ操作 SQLを使い慣れていれば，SQLで各種の操作をするのが良いだろう． 一方，Rでのデータフレームの操作に慣れていれば，取得したデータをRで操作するのが良い． つまり，データ取得だけにDBIを利用して，その後はdplyrやtidyverseの各種パッケージの関数を駆使してデータを処理する． さらに，その結果を図示したい場合は，ggplot2を使うと良い． 14.3 準備 install.packages(c(&quot;DBI&quot;, &quot;RSQLite&quot;)) library(DBI) library(RSQLite) library(tidyverse) ## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── ## ✔ dplyr 1.1.2 ✔ readr 2.1.4 ## ✔ forcats 1.0.0 ✔ stringr 1.5.0 ## ✔ ggplot2 3.4.2 ✔ tibble 3.2.1 ## ✔ lubridate 1.9.2 ✔ tidyr 1.3.0 ## ✔ purrr 1.0.1 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() ## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors # 一時的データの準備 con &lt;- dbConnect(RSQLite::SQLite(), dbname = &quot;:memory:&quot;) dbWriteTable(con, &quot;mpg&quot;, mpg) dbListTables(con) ## [1] &quot;mpg&quot; 14.4 使い方 # SQLで選択・フィルタ res &lt;- dbSendQuery(con, &quot;SELECT year, model, displ, cyl FROM mpg WHERE cyl = 4&quot;) df &lt;- dbFetch(res) dbClearResult(res) tibble::as_tibble(df) ## # A tibble: 81 × 4 ## year model displ cyl ## &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; ## 1 1999 a4 1.8 4 ## 2 1999 a4 1.8 4 ## 3 2008 a4 2 4 ## 4 2008 a4 2 4 ## 5 1999 a4 quattro 1.8 4 ## 6 1999 a4 quattro 1.8 4 ## 7 2008 a4 quattro 2 4 ## 8 2008 a4 quattro 2 4 ## 9 1999 malibu 2.4 4 ## 10 2008 malibu 2.4 4 ## # ℹ 71 more rows # とりあえず全部取得してから，dplyrで選択・フィルタ res &lt;- dbSendQuery(con, &quot;SELECT * FROM mpg&quot;) df &lt;- dbFetch(res) dbClearResult(res) df %&gt;% tibble::as_tibble() %&gt;% print() %&gt;% dplyr::select(year, model, displ, cyl) %&gt;% dplyr::filter(cyl == 4) %&gt;% head() ## # A tibble: 234 × 11 ## manufacturer model displ year cyl trans drv cty hwy fl class ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 audi a4 1.8 1999 4 auto… f 18 29 p comp… ## 2 audi a4 1.8 1999 4 manu… f 21 29 p comp… ## 3 audi a4 2 2008 4 manu… f 20 31 p comp… ## 4 audi a4 2 2008 4 auto… f 21 30 p comp… ## 5 audi a4 2.8 1999 6 auto… f 16 26 p comp… ## 6 audi a4 2.8 1999 6 manu… f 18 26 p comp… ## 7 audi a4 3.1 2008 6 auto… f 18 27 p comp… ## 8 audi a4 quattro 1.8 1999 4 manu… 4 18 26 p comp… ## 9 audi a4 quattro 1.8 1999 4 auto… 4 16 25 p comp… ## 10 audi a4 quattro 2 2008 4 manu… 4 20 28 p comp… ## # ℹ 224 more rows ## # A tibble: 6 × 4 ## year model displ cyl ## &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; ## 1 1999 a4 1.8 4 ## 2 1999 a4 1.8 4 ## 3 2008 a4 2 4 ## 4 2008 a4 2 4 ## 5 1999 a4 quattro 1.8 4 ## 6 1999 a4 quattro 1.8 4 SQL使いの方は，「SQLではじめるデータ分析 ―クエリで行う前処理、時系列解析、コホート分析、テキスト分析、異常検知」を参考にしてSQLでデータ処理をするのも良いだろう． しかし，R使いにとってはdplyrやggplot2を使って処理するほうが楽だと思われる． dplyrやggplot2を使ったデータ分析には，「Rではじめるデータサイエンス」が参考になる． https://r4ds.hadley.nz/ その他，DBIパッケージの詳細は以下を参照． https://cran.r-project.org/web/packages/DBI/vignettes/DBI-1.html "],["xlsx.html", "Chap. 15 xlsxでエクセル操作 15.1 オートフィルタの設定とウィンドウ枠の固定の自動化スクリプト 15.2 その他の操作(未作成)", " Chap. 15 xlsxでエクセル操作 xlsxパッケージを使うと，エクセルのファイルの読み込み・書き込みをはじめ， オートフィルタの設定やウィンドウ枠の固定などの各種操作が可能である． 15.1 オートフィルタの設定とウィンドウ枠の固定の自動化スクリプト xlsxの使用例として，オートフィルタを設定して・ウィンドウ枠を固定する自動化スクリプトを作成した． 15.1.1 使用方法 準備：Rのインストール 準備：set_autofilter_freezepanel.rsc をダウンロード(右クリックして「名前を付けてリンク先を保存」)して，任意のフォルダに保存． 準備：スクリプトの関連付けを参考にして，「.rsc」を「Rscript.exe」に関連付けする(Windowsの場合)．Macの場合は，Mac - 拡張子に関連付けられているアプリを変更する方法などを参考にしてほしい． set_autofilter_freezepanel.rsc と同じフォルダに，処理したいエクセルのファイルを保存． 実行前のエクセルのファイル set_autofilter_freezepanel.rsc をダブルクリックして実行すると，黒い画面が表示されてプログラムが実行される． プログラムが自動的にエクセルのファイルの1行目のA列からZ列までにオートフィルタを設定し，1行目と1列目でウィンドウ枠を固定する． 複数ファイル・複数シートにも対応している． なお，初回実行時は，xlsxパケージのダウンロードのため，少し時間がかかるかもしれない． 2回目以降はファイル数が多すぎなければ，一瞬で処理されるはず． 実行後のエクセルのファイル 15.1.2 スクリプトの内容説明 # Package, 準備 if(! &quot;xlsx&quot; %in% installed.packages()[,1]){ # xlsxパッケージ有無の確認 # パッケージが無い場合 options(repos = &quot;https://cran.ism.ac.jp/&quot;) # ミラーサイトの設定 install.packages(&quot;xlsx&quot;) # パッケージのインストール } # Functions, 関数 # 註：xlsxパッケージの関数は返り値の代入がない # 副作用でシートなどを操作するため? # 参照型を使っているため? # 参考：通常のRの関数は，返り値の代入をすることが多いの # オートフィルタの設定 set_auto_filter &lt;- function(sh){ # A1からZ1までを設定 # もっと多くの列で設定したければ，&quot;A1:Z1&quot;のところを修正する xlsx::addAutoFilter(sh, &quot;A1:Z1&quot;) } # ウィンドウ枠の固定 set_freeze_panel &lt;- function(sh){ # 1列目と1行目のウィンドウ枠を固定 # 固定する場所の変更方法 # 2行目までを固定したい場合は，引数の2つ目と4つ目を，3にする # 3列目までを固定したい場合は，引数の3つ目と5つ目を，4にする xlsx::createFreezePane(sh, 2, 2, 2, 2) } # ワークブックごとで設定 set_af_fp &lt;- function(file){ wb &lt;- xlsx::loadWorkbook(file) # ワークブックの読み込み for(sh in xlsx::getSheets(wb)){ # シートの数だけ繰り返し set_auto_filter(sh) # オートフィルタの設定 set_freeze_panel(sh) # ウィンドウ枠の固定 } xlsx::saveWorkbook(wb, file) # ワークブクの保存 } # Main, 本体 files &lt;- list.files(pattern = &quot;xls&quot;) # &quot;.xls&quot;と&quot;xlsx&quot;の一覧取得 for(file in files){ # ファイルの数だけ繰り返し set_af_fp(file) # set_af_fp()の実行 } 15.2 その他の操作(未作成) "],["qpdf.html", "Chap. 16 qpdfでPDF操作 16.1 準備 16.2 qpdfでできること 16.3 PDFの分割 16.4 PDFの結合 16.5 PDFの圧縮・最適化 16.6 PDFへのページ番号付加 16.7 関数一覧", " Chap. 16 qpdfでPDF操作 16.1 準備 いつものように，まずパッケージをインストールする． qpdfはPDF操作のためのパッケージである． 著者作パッケージのであるautomaterをインストールするが，これはCRANには登録していない． いずれはCRANに登録したいと思っているが，現段階ではGitHubで公開している． そのため，install.packages()ではなく，devtools::install_github()を使ってインストールする． install.packages(&quot;qpdf&quot;) install.packages(&quot;devtools&quot;) devtools::install_github(&quot;matutosi/automater&quot;) library(tidyverse) library(qpdf) library(automater) 16.2 qpdfでできること qpdfパッケージでは，PDFファイルのページ分割・抽出・結合・回転・圧縮・重ね合わせが可能である． あくまでページ単位での操作で，PDFに含まれるテキスト自体の編集はできない． ページ単位でのPDF操作は，Adobe AcrobatでなくてもCubePDF UtilityやPDFtkを使えば可能である． PDFtkはコマンドラインでの操作も可能であるため，大量の操作をするには適している． とはいえ，Rやそのパッケージで操作が自動化できればさらに便利である． なお，PDF関連の他のパッケージとしてはRpopplerやpdftoolsがある． Rpopplerではテキストの抽出ができる． pdftoolsではテキストの抽出，OCR(画像の文字認識，内部でtesseractパッケージを使用)，PDFファイルの分割・結合(内部でqpdfパッケージを使用)，画像ファイルへの変換などができる． また，Microsoft365Rを使えばPDFをワードに変換できる． 余談であるが，Rのパッケージはそれぞれ独自コードを持つ部分がある一方で，他のパッケージの関数をインポートしているものや，ラッパー関数を用意しているものなどがある． 例えば，automaterではそれ自体で有用な機能を持っているというよりは，他のパッケージを利用しやすくするためのラッパー関数の集合である． そのため，automaterのコードをもとにさらに使いやすく改良可能であり，各自で試してほしい． 16.3 PDFの分割 PDFの分割は非常に簡単である． pdf_split()関数にinput引数として分割するファイルを，output引数として出力パスを指定すれば良い． パスワードが必要な場合は，引数passwordを指定する． # wd &lt;- &quot;set_your_directory&quot; # setwd(wd) review &lt;- curl::curl_download(&quot;https://www.jstage.jst.go.jp/article/vegsci/31/2/31_193/_pdf/-char/ja&quot;, fs::file_temp()) split_pdf &lt;- qpdf::pdf_split(review) head(split_pdf) ファイル名の文字列のベクトルが返り値なので，それをもとにしてファイル名を変更すると実用的な自動化ができるだろう． ページを指定した抽出も可能で，pdf_subset()関数を使用する． 引数としてpagesを指定する以外は，pdf_split()と同じ使い方である． # 指定ページを抽出，create a new pdf with a subset of the input pages pdf_subset(input, pages = 1, output = NULL, password = &quot;&quot;) 以下の内容は，パッケージautomaterのinst/rscディレクトリにあるsplit_qpdf.rscの内容である． 拡張子.rscをRscriptに関連付けすれば，split_qpdf.rscと同じフォルダに保存したPDFファイルをsplit_qpdf.rscをクリックするだけで分割できる． 拡張子の関連付けは，スクリプトの関連付けを参照して欲しい． system.file(&quot;rsc/split_qpdf.rsc&quot;, package = &quot;automater&quot;) %&gt;% readLines() %&gt;% paste0(collapse = &quot;\\n&quot;) %&gt;% cat() ## # # # # # # # # # # # # # # # # # # # ## # ## # See https://github.com/matutosi/automater/blob/main/vignettes/split_qpdf.md ## # ## # # # # # # # # # # # # # # # # # # # ## ## # Prepare ## pkg &lt;- &quot;devtools&quot; ## if(! pkg %in% installed.packages()[,1]){ ## install.packages(pkg, repo = &quot;https://cran.ism.ac.jp/&quot;) ## } ## ## pkg &lt;- &quot;automater&quot; ## ver &lt;- utils::packageDescription(pkg, fields = &quot;Version&quot;) ## if(utils::compareVersion(ver, &quot;0.2.0&quot;) &lt; 0){ ## devtools::install_github(&quot;matutosi/automater&quot;, upgrade = &quot;never&quot;, force = TRUE) ## } ## ## automater::validate_package(&quot;qpdf&quot;) ## automater::validate_package(&quot;stringr&quot;) ## ## # Run ## files &lt;- list.files(pattern = &quot;\\\\.pdf&quot;) ## for(file in files){ ## output &lt;- qpdf::pdf_split(file) ## n_page &lt;- qpdf::pdf_length(file) ## extra &lt;- 0 # to avoid dupulicated file name, add extra degits ## numbered &lt;- automater::file_numbered(file, n_page, extra = extra) ## while(automater::is_duplicated(files, numbered)){ ## extra &lt;- extra + 1 ## numbered &lt;- automater::file_numbered(file, n_page, extra = extra) ## } ## file.rename(output, numbered) ## } ## ## automater::message_to_continue() # system.file(&quot;rsc/split_qpdf.rsc&quot;, package = &quot;automater&quot;) %&gt;% # readtext::readtext(verbosity = 0) %&gt;% # `[[`(&quot;text&quot;) %&gt;% # cat() 具体的な方法は次のとおりである． - split_qpdf.rsc をディレクトリーに保存する - 以下のコードで split_qpdf.rsc をコピー可能 file &lt;- &quot;split_qpdf&quot; path &lt;- &quot;c:/&quot; # set your path automater::set_rsc(file, path) 拡張子 .rsc を Rscript.exe に関連付ける 分割したいPDFファイルを split_qpdf.rsc と同じディレクトリにコピーする split_qpdf.rsc をクリックする 黒いウィンドウが開くので，しばらく待つ split_qpdf.rsc を初めて実行するときは，パッケージのインストールに時間がかかることがある． 出力ファイル名は以下のとおりである． - 入力：「original.pdf」(15ページ) - 出力: “original_01.pdf”, “original_02.pdf”, …, “original_15.pdf” 16.4 PDFの結合 結合させる場合は，input引数に結合させたいファイル名を指定する． それ以外は，pdf_split()と同様である． # 結合，join several pdf files into one pdf_combine(input, output = NULL, password = &quot;&quot;) 特定のディレクトリ内のPDFファイルを1つのPDFファイルとして結合することを自動化するスクリプトは以下のとおりである． system.file(&quot;rsc/combine_qpdf.rsc&quot;, package = &quot;automater&quot;) ## [1] &quot;D:/pf/R/R-4.3.0/library/automater/rsc/combine_qpdf.rsc&quot; readLines() %&gt;% paste0(collapse = &quot;\\n&quot;) %&gt;% cat() combine_qpdf.rsc をディレクトリに保存 以下のコードで、combine_qpdf.rsc をコピー可能 file &lt;- &quot;combine_qpdf&quot; path &lt;- &quot;c:/&quot; # set your path automater::set_rsc(file, path) 拡張子 .rsc を Rscript.exe に関連付ける 結合したいPDFファイルを combine_qpdf.rsc と同じディレクトリにコピーする ファイルの結合順はファイル名の順序と同じ combine_qpdf.rsc をクリックする 黒いウィンドウが開くので，しばらく待つ 初めて実行するときは，パッケージのインストールに時間がかかることがある． 結合したファイル名は以下のとおりである． 出力: 「combined_“2020-11-27_12_00_00.pdf”」(結合した日付・時刻) PDFファイルの結合順はファイル名の順序と同じなので，fs::dir_ls()でファイル名一覧を取得し，file_move()で名前を変更する必要がある． さらに，このあたりも自動化するには， wd &lt;- &quot;D:/matu/work/ToDo/automater/inst/pdf&quot; setwd(wd) files &lt;- fs::dir_ls(regexp = &quot;\\\\.pdf&quot;) files %&gt;% paste0(seq(.), &quot;: &quot;, .) %&gt;% paste0(collapse = &quot;\\n&quot;) %&gt;% paste0(&quot;\\n 結合するファイルを番号で指定してください(カンマ区切り)．\\n 例：3,1,2\\n&quot;) %&gt;% cat() order &lt;- readLines(stdin(), n=1) 16.5 PDFの圧縮・最適化 pdf_compress()は圧縮とともに，最適化(Linealize)してくれる． 最適化されていないPDFはファイルを全部読み込まないと表示できないのに対して， 最適化されたPDFは最後まで読み込みが完了しなくてもページ表示できる． ネット上にある重いPDFを表示させる場合に特に役立つ． # 圧縮，compress or linearize a pdf file pdf_compress(input, output = NULL, linearize = FALSE, password = &quot;&quot;) 16.6 PDFへのページ番号付加 pdf_overlay_stamp # 重ね合わせ pdf_overlay_stamp(input, stamp, output = NULL, password = &quot;&quot;) 16.7 関数一覧 # ページ数取得，show the number of pages in a pdf pdf_length(input, password = &quot;&quot;) # 1ページごとに分割，split a single pdf into separate files, one for each page pdf_split(input, output = NULL, password = &quot;&quot;) # 指定ページを抽出，create a new pdf with a subset of the input pages pdf_subset(input, pages = 1, output = NULL, password = &quot;&quot;) # 結合，join several pdf files into one pdf_combine(input, output = NULL, password = &quot;&quot;) # 圧縮，compress or linearize a pdf file pdf_compress(input, output = NULL, linearize = FALSE, password = &quot;&quot;) # ページ回転，rotate selected pages pdf_rotate_pages(input, pages, angle = 90, relative = FALSE, output = NULL, password = &quot;&quot;) # 重ね合わせ pdf_overlay_stamp(input, stamp, output = NULL, password = &quot;&quot;) "],["pdf2docx.html", "Chap. 17 pdfをdocxに変換 17.1 RDCOMClient 17.2 pdf2docx", " Chap. 17 pdfをdocxに変換 17.1 RDCOMClient https://github.com/omegahat/RDCOMClient CRANにはないが， 17.1.1 インストール install.packages(&quot;RDCOMClient&quot;, repos = &quot;http://www.omegahat.net/R&quot;, type = &quot;win.binary&quot;) 17.1.2 変換実行 https://stackoverflow.com/questions/32846741/convert-pdf-file-to-docx/73720411#73720411 library(RDCOMClient) wordApp &lt;- COMCreate(&quot;Word.Application&quot;) wordApp[[&quot;Visible&quot;]] &lt;- TRUE wordApp[[&quot;DisplayAlerts&quot;]] &lt;- FALSE path_To_PDF_File &lt;- &quot;xxx.pdf&quot; path_To_Word_File &lt;- &quot;xxx.docx&quot; doc &lt;- wordApp[[&quot;Documents&quot;]]$Open(normalizePath(path_To_PDF_File), ConfirmConversions = FALSE) doc$SaveAs2(path_To_Word_File) 17.1.3 ラッパー関数 library(RDCOMClient) pdf2docx &lt;- function(pdf, docx = NULL){ if(is.null(docx)){ docx &lt;- paste0(getwd(), sub(&quot;pdf&quot;, &quot;docx&quot;, pdf)) } wordApp &lt;- RDCOMClient::COMCreate(&quot;Word.Application&quot;) wordApp[[&quot;Visible&quot;]] &lt;- TRUE wordApp[[&quot;DisplayAlerts&quot;]] &lt;- FALSE doc &lt;- wordApp[[&quot;Documents&quot;]]$Open(normalizePath(pdf), ConfirmConversions = FALSE) doc$SaveAs2(docx) doc$close() } wd &lt;- &quot;d:/matu/work/tmp/&quot; setwd(wd) path_docx &lt;- function(path_pdf){ if(grepl(&quot;[A-z]:&quot;, path_pdf)){ return(sub(&quot;pdf&quot;, &quot;docx&quot;, path_pdf)) } path &lt;- file.path(getwd(), sub(&quot;pdf&quot;, &quot;docx&quot;, path_pdf)) return(sub(&quot;//&quot;, &quot;/&quot;, path)) } testthat::expect_equal(path_docx(&quot;a.pdf&quot; ), &quot;d:/matu/work/tmp/a.docx&quot; ) testthat::expect_equal(path_docx(&quot;d:/matu/work/tmp/a.pdf&quot;), &quot;d:/matu/work/tmp/a.docx&quot; ) testthat::expect_equal(path_docx(&quot;test/a.pdf&quot; ), &quot;d:/matu/work/tmp/test/a.docx&quot;) testthat::expect_equal(path_docx(&quot;/test/a.pdf&quot; ), &quot;d:/matu/work/tmp/test/a.docx&quot;) wd &lt;- &quot;d:/&quot; setwd(wd) pdf2docx(&quot;a.pdf&quot;) 17.2 pdf2docx "],["microsoft365r.html", "Chap. 18 Microsoft365R 18.1 Outlookで複数メール送信を一斉送信 18.2 複数のワード文書の文字列を一括置換 18.3 年月日の更新", " Chap. 18 Microsoft365R 18.1 Outlookで複数メール送信を一斉送信 複数人に全く同じメールを送る場合は，TOやCCに複数の電子メールアドレスを入力すれば良い． また，宛先を知られるのがよろしくないときは，BCCに送信先のアドレスを，TOに自分のアドレスを入れておけば問題ない． このとき，送り先の全員に全く同じ内容，同じ添付ファイルであればメールは1つ作成すれば問題ない． でも，個々の人に対して少しだけ違う内容のメールを送りたいときとか，添付ファイルを別々のものにしたいときがある． また，単純なことだが，宛先が「みなさま」よりは，「○○様」のように宛先だけでも変更したいというときもある． 何かお願いをするときには，「みなさま」よりも直接名前を書いたほうが結構効果が高い． 例えば，学会での投票のお願いなどは，MLに流すより個別メールの方が確実だ． そのようなとき，いちいちメールを作成・編集していると面倒だし，間違いのもとになる． 名前を中途半端に修正して，3箇所のうち1箇所だけ別の人の名前にしてしまっていたり，日付と曜日があっていないなどの間違いは日常茶飯事だ． このような間違いをなくすには，個別に変更する部分と全体で統一するところを分けておき，あとはパソコンを使ってうまくつなぎ合わせる． でも，このように作成したメールの本文や宛先をいちいちコピー&amp;ペーストするのは，手間がかかるし，個々にも作業のミスが入り込む余地が大きい． 18.1.1 インストールと初期設定 この操作は，最初に1回だけ実行すればOK. # インストール install.packages(&quot;Microsoft365R&quot;) # パッケージの読み込み library(Microsoft365R) # 会社など組織で契約している場合 Microsoft365R::get_business_outlook() # 個人利用の場合 # Microsoft365R::get_personal_outlook() 18.1.2 とりあえず使う まずは，試しにメールを作って送ってみる． # 会社などで組織で契約している場合 outlook &lt;- Microsoft365R::get_business_outlook() # 個人利用の場合 # outlook &lt;- Microsoft365R::get_personal_outlook() # 個別にemailを送る場合 # メール作成のみ # メールはoutlookの下書きフォルダにも保存されている em &lt;- outlook$create_email( body = &quot;Hello from R\\nHello from R\\n&quot;, subject = &quot;Hello&quot;, to = &quot;matutosi@gmail.com&quot;, cc = &quot;matutosi@konan-wu.ac.jp&quot; ) # メール送信 em$send() # outlookの下書きフォルダからメールを取り出す drafts &lt;- outlook$get_drafts()$list_emails() # 下書きフォルダのメール一覧 drafts # 下書きフォルダのメールの1つ目を送信 drafts[[1]]$send() # 受信トレイのメール一覧 inbox &lt;- outlook$get_inbox()$list_emails() # 受信トレイの1つ目の内容 inbox[[1]] 18.1.3 メールの一斉送信 宛先や本文をエクセルに入力しておき，そこからデータを抽出して一斉にメールを送信できる． 送信: send(必須) 1: 送信する，0: 下書きに保存 宛先: to(必須) CC: cc(任意) BCC: bcc(任意) 件名: subject(必須でないが，入力推奨) 本文: body(必須でないが，入力推奨) 添付ファイル: attachment(任意) 宛先が入力されていないとメールは送信できない． CCとBCCは任意． 件名と本文はなくても送信できるが，両方とも何もないとメールの意味がない． 添付ファイルがあれば，ファイル名を指定． 複数ファイルを添付するときは，カンマでpath(ファイル名)を区切る． 絶対pathで指定すると間違いは少ない． # 宛先や本文をエクセルで作成しておき # 一斉にメールを作成・送信する場合 # 関数の読み込み source(&quot;https://gist.githubusercontent.com/matutosi/bed00135698c8e3d2c49ef08d12eef9c/raw/6acc2de844eeeab03aaf36f2391e223d621b36a8/outlook.R&quot;) outlook &lt;- Microsoft365R::get_business_outlook() # エクセルファイルの内容 # working directoryにファイルがない場合は， # 絶対パス(&quot;c:/user/documents/outlook.xlsx&quot;など)で指定 path &lt;- &quot;outlook.xlsx&quot; # メール作成・送信 create_email(path, outlook, send = TRUE) # メール作成のみ # &quot;send = FALSE&quot; にすれば，メールを作成して下書きに保存 create_email(path, outlook, send = FALSE) 18.2 複数のワード文書の文字列を一括置換 多くのプログラマは，普段はそれぞれの好みのテキストエディタを使っていいるだろう． 私はWindowsでは古典的なエディタである秀丸エディタを長らく使っている． キー割り当てのカスタマイズや自分用の細かなマクロがあるので，今さらエディタを変更できない． ートパソコンではThinkPadをずっと使っているので，キーボード自体も変更できない． これを変更すると作業効率が悪くなってしまう． そのため，デスクトップパソコンでもThinkPadキーボードを愛用している． このようにエディタとキーボードだけでパソコンの作業が完了すれば良いのだが，仕事上ワードで文書を作成しなければならないことがある． ワードは余計なおせっかいをたくさんしてくれるので，不要なことはしないように設定している． それでも，できればワードでの作業は最小限にしたいのが本音である． 起動に時間はかかるし，置換で使える正規表現がちょっと変だからである． Rからワード文書内の文字列を置換すれば，ワードを起動する手間が省略できる． また，正規表現を使った置換や複数の組み合わせの置換もできる． さらに，「AをB」に「BをA」にという入れ替えも，プログラムで途中に別の文字列への置き換えで実現できる． このとき途中で使う文字列が元の文書内にないことは必須条件であるが，これもプログラムで確認可能である． もちろん，複数ファイルでの置換やファイル名を正規表現で指定することもできる． 18.2.1 置換のコードの例 # https://ardata-fr.github.io/officeverse/index.html # https://github.com/omegahat/RDCOMClient # install.packages(&quot;officer&quot;) pkg &lt;- &quot;D:/matu/work/ToDo/automater/R&quot; devtools::load_all(pkg) library(officer) library(tidyverse) wd &lt;- &quot;d:/&quot; setwd(wd) replacement &lt;- read.table(&quot;replacement.txt&quot;, header = TRUE, sep = &quot;\\t&quot;) files &lt;- replacement[[&quot;file&quot;]] %&gt;% stringr::str_c(collapse = &quot;|&quot;) %&gt;% fs::dir_ls(regexp = .) %&gt;% exclude(stringr::str_detect(., &quot;^replaced\\\\_&quot;)) replacement &lt;- expand_file(replacement, files) files %&gt;% purrr::walk(replace_docs, replacement) 18.3 年月日の更新 毎年同じような文書を作成しているが，年だけを更新しなければならないことは多いだろう． 手作業で日付を更新すると，どうしても間違いが混入する． 単純な見間違いや入力間違いもあれば，日付を変更して曜日を変更し忘れる，あるいは日付を変更し忘れることをやってしまいがちだ． このような更新作業も，Wordの検索・置換の機能で可能だし，Rから特定の日付を別の日付に変換できる． いっそのことなら，日付を文書内で自動的に取得して日付あるいは曜日を更新できれば楽ができる． 例えば，「2023年4月10日(月)」を2024年に変更することを考えよう． 何番目の何曜日かで日付が決まっているなら，2023年4月10日は第2月曜日である． この場合は，2024年4月の第2月曜日は「2024年4月8日(月)」なので，「2023年4月10日(月)」を「2024年4月8日(月)」に置換する． 一方，日付固定なら「2024年4月10日(水)」に置換する． さらに，求めた日が日曜日の場合は前日の土曜日あるいは月曜日にずらすとか，10月1日の前後3日以内の火曜日のような法則でも可能である． 祝日との関連で日付を決定することもあるだろう． そのようなときは，祝日データをあわせてコードに入れれば良い． とにかく，決め方が明確で1つに日付を決めることができれば，プログラムによる自動化できる． ここではlubridateを活用して，ワード文書の日付を更新する方法を扱う． lubridateで日付固定あるいは位置固定のときでの翌年の年月日を求める方法は以下を参考にして欲しい． lubridateで日付・時刻を扱う 18.3.1 活用例 ワード文書内の日付は，正規表現を用いて入手できる． それぞれの曜日なし版が考えられ，月と日が1桁の時に「04」のようにパディング(桁合わせ)されていることもあるだろう． これらは，正規表現によって対応可能である． もちろん，日付っぽい表記のすべてを含むことはできないが，よく使う日付表記は網羅できるだろう． 年表記が2桁の場合，半角や全角のスペースを途中に含んだり，「()」の半角・全角の違いなどの表現揺れもあり得る． 表記揺れを修正するための置換や削除などは，stringr(あるいはbase)の関数で対応できる． # 20\\d\\d年月日 # / library(tidyverse) ## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── ## ✔ dplyr 1.1.2 ✔ readr 2.1.4 ## ✔ forcats 1.0.0 ✔ stringr 1.5.0 ## ✔ ggplot2 3.4.2 ✔ tibble 3.2.1 ## ✔ lubridate 1.9.2 ✔ tidyr 1.3.0 ## ✔ purrr 1.0.1 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() ## ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors x &lt;- &quot;21年1月1日(月)，2021年1月1日(月)，2021年10月10日(月)，2月2日(月)，12月22日(月)，2021/1/1(月)，2021/10/10(月)，2/2(月)，12/22(月)，21年1月1日，2021年1月1日，2021年10月10日，2月2日，12月22日，2021/1/1，2021/10/10，2/2，12/22&quot; regrep &lt;- &quot;((20)*[2-5]\\\\d+[年/_-]*)*\\\\d\\\\d*[月/_-]*\\\\d\\\\d*[日]*(\\\\([月火水木金土日]\\\\))*&quot; stringr::str_extract_all(x, regrep) ## [[1]] ## [1] &quot;21年1月1日(月)&quot; &quot;2021年1月1日(月)&quot; &quot;2021年10月10日(月)&quot; ## [4] &quot;2月2日(月)&quot; &quot;12月22日(月)&quot; &quot;2021/1/1(月)&quot; ## [7] &quot;2021/10/10(月)&quot; &quot;2/2(月)&quot; &quot;12/22(月)&quot; ## [10] &quot;21年1月1日&quot; &quot;2021年1月1日&quot; &quot;2021年10月10日&quot; ## [13] &quot;2月2日&quot; &quot;12月22日&quot; &quot;2021/1/1&quot; ## [16] &quot;2021/10/10&quot; &quot;2/2&quot; &quot;12/22&quot; "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
