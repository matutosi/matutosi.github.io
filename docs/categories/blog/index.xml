<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>blog on matutosi</title>
    <link>https://matutosi.github.io/categories/blog/</link>
    <description>Recent content in blog on matutosi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp-jp</language>
    <lastBuildDate>Tue, 02 Sep 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://matutosi.github.io/categories/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Windowsでgrep</title>
      <link>https://matutosi.github.io/post/20250902/</link>
      <pubDate>Tue, 02 Sep 2025 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20250902/</guid>
      <description>Windows11のコマンドプロンプトでgrepみたいなことをするには，findを使う． pip list | find &amp;quot;py&amp;quot;
指がgrepになってしまうことがある． &amp;ldquo;c:/windows/system32&amp;quot;にある&amp;quot;find.exe&amp;quot;を&amp;quot;grep.exe&amp;quot;として別名で保存しておくと，grepで実行できる．</description>
    </item>
    
    <item>
      <title>書籍の紹介記事</title>
      <link>https://matutosi.github.io/post/20250901/</link>
      <pubDate>Mon, 01 Sep 2025 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20250901/</guid>
      <description>中澤港さんが書籍の紹介記事を書いてくださった． ありがとうございます．
 https://minato.sip21c.org/im3r/20250828.html  </description>
    </item>
    
    <item>
      <title>screenshotパッケージ0.9.2</title>
      <link>https://matutosi.github.io/post/20250825/</link>
      <pubDate>Mon, 25 Aug 2025 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20250825/</guid>
      <description>久しぶりにパッケージを更新しようとしたら，色々とわからないことが多い． 「完成した」と思っても，細かなミスがあって，何度もやり直した． GitHubを見ると草の色が濃いので頑張っているように見えるが，単に細々したコミットをしているだけ．
 https://cran.r-project.org/web/packages/screenshot/index.html  </description>
    </item>
    
    <item>
      <title>書籍と対面</title>
      <link>https://matutosi.github.io/post/20250823/</link>
      <pubDate>Sat, 23 Aug 2025 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20250823/</guid>
      <description>印刷できた書籍が出版社から送られてきた． ゲラでは何度も見てきたが，カバーがついたものと対面するのは，やっぱり嬉しい．
 森北出版 https://www.morikita.co.jp/books/mid/085831 note記事(はじめに) https://note.com/morikita/n/n91cc7dc150af note記事(インタビュー) https://note.com/morikita/n/nae210c70d90c Amazon https://www.amazon.co.jp/dp/4627858310/  </description>
    </item>
    
    <item>
      <title>消える画像のスクリーンショット</title>
      <link>https://matutosi.github.io/post/20250822/</link>
      <pubDate>Fri, 22 Aug 2025 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20250822/</guid>
      <description>Windowsで[PrtSc]キーを押したときに出てくる「四角形」とか「ウィンドウ」とかを選ぶウィンドウの画像を使いたいと思った． この画面を撮影しようとすると，消えてしまってうまくいかない．
そこで，screenshotパッケージで使っている screenshot.exe とcmdでのスリープを活用して撮影することにした．
 https://matutosi.github.io/screenshot/  REM screenshot.bat REM Windowsでスクリーンショット画像を撮影するときに出てくる画像のスクリーンショットを撮影する方法 REM 普通なら，スクリーンショットを撮影するときに消えてしまうので，うまくいかない REM cmd timeout でスリープさせている間に，スクリーンショットの画像を出して REM screenshot パッケージの実行ファイル(screenshot.exe)でスクリーンショットをとる timeout 10 REM 10秒スリープ：時間が短いときは適宜増やす screenshot.exe screenshot_icon.png  screenshot.exe のファイルのあるディレクトリに上のコードを screenshot.bat という名前で保存する screenshot.bat の起動する [PrtSc]を押してスクリーンショットを撮影したい画面にする しばし待機する screenshot_icon.png という画像が保存される  </description>
    </item>
    
    <item>
      <title>だいぶ前に書いたRの記事</title>
      <link>https://matutosi.github.io/post/20250821/</link>
      <pubDate>Thu, 21 Aug 2025 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20250821/</guid>
      <description>学会とかで「あのRの松村さんですか?」と言われたときは，研究よりもRの方を覚えられていて昔は残念な気がした． 今は全然気にしていないというか，そうだろうねという感じ．
植生情報に書いていたRの記事を読んで参考にしたと，最近頂いたメールにあった． そこで，だいぶ前に書いたRの記事を researchmap からダウンロードできるようにした．
 https://researchmap.jp/read0142280/misc  個別の記事
 植生研究でのRパッケージtidyverse使用のすすめ https://researchmap.jp/read0142280/misc/50896498/attachment_file.pdf Rを使ったシミュレーション(後編) https://researchmap.jp/read0142280/misc/16859770/attachment_file.pdf Rを使ったシミュレーション(前編) https://researchmap.jp/read0142280/misc/19714842/attachment_file.pdf Rを使った植生資料の解析(入門編) https://researchmap.jp/read0142280/misc/9202619/attachment_file.pdf  </description>
    </item>
    
    <item>
      <title>書籍の紹介記事</title>
      <link>https://matutosi.github.io/post/20250820/</link>
      <pubDate>Wed, 20 Aug 2025 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20250820/</guid>
      <description>『Rによる自動化・効率化レシピ集』の紹介記事を編集者の方が作成してくださった． 書籍のはじめにの部分が紹介されています．
 https://note.com/morikita/n/n91cc7dc150af  </description>
    </item>
    
    <item>
      <title>Rによる自動化・効率化レシピ集</title>
      <link>https://matutosi.github.io/post/20250716/</link>
      <pubDate>Wed, 16 Jul 2025 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20250716/</guid>
      <description>森北出版から「Rによる自動化・効率化レシピ集」のページができていた． 結構時間がかかってしまった．
 https://www.morikita.co.jp/books/mid/085831 https://www.amazon.co.jp/dp/4627858310/  </description>
    </item>
    
    <item>
      <title>Streamlit</title>
      <link>https://matutosi.github.io/post/20250326/</link>
      <pubDate>Wed, 26 Mar 2025 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20250326/</guid>
      <description>PythonのパッケージStreamlitを使って，植生調査の組成表のCORを簡単にできるようなwebアプリを作ろうとしている． 組成表の物体検出にはDetectron2を使っていたが環境によってイントールが難しい． そこで物体検出にはYOLOを使うことにした． 比較的簡単に使えるし，Streamlitでも使えそう(ちょっと工夫は必要だったが)．
ところで，Streamlitを使ったものはいろんなアプリがあって楽しい．
 https://share.streamlit.io/explore?sort=most+viewed&amp;amp;category=favorites  他にも使えるものはあるのだろうが，背景を除外してくれるものは簡単に試せる．
 https://bgremoval.streamlit.app/  </description>
    </item>
    
    <item>
      <title>ドキュメントはAIに依頼しよう</title>
      <link>https://matutosi.github.io/post/20250317/</link>
      <pubDate>Mon, 17 Mar 2025 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20250317/</guid>
      <description>pivoteaのPython版が一応ちゃんと動くようになった(ハズ)． 説明の文章はマダ． でも，このあたりはAIに依頼すれば結構良い感じでまとめてくるので，だいぶ楽だ． コードを書くのは割と楽しいけど，ドキュメントを書くのは結構しんどい．
 https://github.com/matutosi/pivoteapy  </description>
    </item>
    
    <item>
      <title>整理の重要性</title>
      <link>https://matutosi.github.io/post/20250314/</link>
      <pubDate>Fri, 14 Mar 2025 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20250314/</guid>
      <description>もろもろのコードや文章を作ったときには詳しい内容を覚えている． でも，ちゃんと整理しておかないと内容をすぐに忘れてしまう． 特に時間が立つと最初から内容を理解しないといけなくなる．
分かってはいるが，後からでもわかるぐらいに整理しておくのが大事だ．
研究でちょっとしばらく触っていなかったコードを整理するのに苦戦している．</description>
    </item>
    
    <item>
      <title>pivoteapy</title>
      <link>https://matutosi.github.io/post/20250313/</link>
      <pubDate>Thu, 13 Mar 2025 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20250313/</guid>
      <description>時間割などのような文字列のピボットテーブルをするために，pivoteaというパッケージをRで作った．
 https://github.com/matutosi/pivotea  また，それをもとにしたwebアプリも作った．
 https://github.com/matutosi/convex  最近はPythonを勉強しているので，練習を兼ねてpython版を作成している． しっかりしたライブラリにまとめるにはかなりの時間がかかるが，基本的な動作自体はだいたいできてきた．</description>
    </item>
    
    <item>
      <title>週間の縦型カレンダーを生成するアプリ</title>
      <link>https://matutosi.github.io/post/20250308/</link>
      <pubDate>Sat, 08 Mar 2025 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20250308/</guid>
      <description>カレンダーは毎年週間の縦型のもので，自作のものを使っている． 市販品ではメモ欄が一番左にあるが，自分の好みである一番右にしている． また，定型の予定は事前にプログラムで書き込んでいた． 最近，Pythonを勉強しているので，TeX版をPythonに書き直した． だいたい求めるものができた．
さらに，streamlitというwebアプリ作成のライブラリがあるので，web版にしてみた． 個人の好みはそれぞれなので，1月始まり・4月始まり，レイアウトの左寄せ・右寄せ，日曜日・月曜日始まり，1日の開始・終了時刻はweb版ではカスタマイズできるようにした．
 https://vercal.streamlit.app/  定型の予定は以下の形式のエクセルファイルを作れば，繰り返してくれる．
   period_start period_end week_of_day event_start event_end event except     2025-04-10 2025-07-10 wed 10:30 12:00 数学 2025-05-07;2025-05-14   2025-04-10 2025-07-10 mon 12:30 12:30 開始のみの予定     定型予定のファイルの詳細は以下を参照してほしい． コードもすべて公開している．
 https://github.com/matutosi/vercal  使い方は，なんとなくわかりそうだとは思う． でも，説明はまだ全然なので今後整理していこう．</description>
    </item>
    
    <item>
      <title>pivoteaとpivoteapy</title>
      <link>https://matutosi.github.io/post/20250224/</link>
      <pubDate>Mon, 24 Feb 2025 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20250224/</guid>
      <description>pivoteaのPythonの関数自体はできてきた．
せっかくなので，Pythonの環境がなくても実行できるように，TkEasyGUIとPyinstallerを使ってexeにする予定．</description>
    </item>
    
    <item>
      <title>pivoteaとpivoteapy</title>
      <link>https://matutosi.github.io/post/20250220/</link>
      <pubDate>Thu, 20 Feb 2025 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20250220/</guid>
      <description>pivoteaというRのパッケージをPythonに変換している． Geminiに相談してコードを変換したが，やはりそのままでは駄目で，エラーがでる． でも，Pythonにも少し慣れてきたので，ちょっとずつデバグしていったら，それなりには動くものになってきた． うまくできたら，&amp;ldquo;pivoteapy&amp;quot;として公開できるかもしれない．
Pythonののパッケージとしてまとめるだけでなく，さらにPythonからRに戻すと，言語の翻訳と同じでRのコードが簡潔になるような気がする．
例：不自然な英語 &amp;ndash;(AIで翻訳)&amp;ndash;&amp;gt; 他の言語 &amp;ndash;(AIで翻訳)&amp;ndash;&amp;gt; 自然な言語
Geminiにリファクタリングを頼むのとどちらがきれいなコードになるのか試してみよう．
 https://cran.r-project.org/web/packages/pivotea/index.html  </description>
    </item>
    
    <item>
      <title>easypdf</title>
      <link>https://matutosi.github.io/post/20250218/</link>
      <pubDate>Tue, 18 Feb 2025 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20250218/</guid>
      <description>easypdfでPDFの文字列を強調表示するものを作成した．
 https://github.com/matutosi/easypdf  </description>
    </item>
    
    <item>
      <title>easypdf</title>
      <link>https://matutosi.github.io/post/20250205/</link>
      <pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20250205/</guid>
      <description>easypdfというのを作った． 作ったというほどのものではないが，Windowsの .exe 形式の実行ファイルなのでプログラミングをせずとも使える．
とりあえずは，PDFの結合をするだけのものを公開した． 使い方は以下をご覧ください．
 https://github.com/matutosi/easypdf  </description>
    </item>
    
    <item>
      <title>発表資料</title>
      <link>https://matutosi.github.io/post/20241006/</link>
      <pubDate>Sun, 06 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20241006/</guid>
      <description>論文とか学会発表などの資料の公開ページへのリンク．
 https://www.dropbox.com/s/wz0c13ksncvjh3k/link.txt?dl=0  </description>
    </item>
    
    <item>
      <title>textrar</title>
      <link>https://matutosi.github.io/post/20240502/</link>
      <pubDate>Thu, 02 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20240502/</guid>
      <description>textrarというRのパッケージを作った．
 textrar: https://cran.r-project.org/web/packages/textrar/  みんなの自動翻訳という翻訳サービスをRから利用するものだ． APIは整備されているのだが，使い方がちょっとややこしいので，簡単に使えるようにした．</description>
    </item>
    
    <item>
      <title>screenshot</title>
      <link>https://matutosi.github.io/post/20230814/</link>
      <pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20230814/</guid>
      <description>画像認識してクリックするパッケージとして，PythonではPyAutoGUIがある． 知っている範囲では，同じようなものがRではなかった． Rでは，マウス・キーボード操作の自動化パッケージとしてkeyboardsimulatorがあるが，画像認識の機能がなかった． そこで，その機能を補完するものとして，screenshotというパッケージをつくってCRANに登録した． なお，このパッケージには，Rからスクリーンショットをとる関数と，画像を元にスクリーン上での位置を特定する関数などがある． keyboardsimulatorと組み合わせると，便利なはずだ．
ちなみに，これまでCRANに登録したパッケージには以下のものがある．
 moranajp: https://cran.r-project.org/web/packages/moranajp/ ecan: https://cran.r-project.org/web/packages/ecan/ clidatajp: https://cran.r-project.org/web/packages/clidatajp/ pivotea: https://cran.r-project.org/web/packages/pivotea/ screenshot: https://cran.r-project.org/web/packages/screenshot/  </description>
    </item>
    
    <item>
      <title>画像位置の特定</title>
      <link>https://matutosi.github.io/post/20230808/</link>
      <pubDate>Tue, 08 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20230808/</guid>
      <description>画像認識してボタンをクリックするのを自動化するために，Rでコードを書いていたら，やはり使いものにならないぐらい遅かった． そこで，Rcppを使ってC++で書き直した． 最低でも10倍，うまくいけば50倍ぐらいになると思っていたが，3倍ぐらいの速度にしかならない． しかも，場合によっては3倍ぐらい遅いこともある． たぶん，C++の書き方が良くないのだと思うが，別の方法で実装することにした．
同じような色だけの画像を認識するのは難しいが，通常
1 needle_imageとhaystack_imageの各ピクセルで共通する色を抽出
2 抽出した色のうちhaystack_imageで出現頻度の少ないものから1つ選んでneedle_imageでの位置を把握 3 needle_imageでの位置をもとに，haystack_imageの基準点(1,1)を抽出 4 出現頻度の少ないものから，順次2と3を繰り返し 5 haystack_imageの基準点が1つに絞れたら，それが探し出そうとしている画像の基準点と一致しているはず
全ピクセルの一致を目指しているのではないので，厳密な一致はしない可能性はあるが，画像があれば必ず一致するはずだ． 厳密な一致を求めるときは，最後にチェックを入れれば良い．
ということで，コードを書いたら結構速い速度になって，満足． 単一色の画像の中からその一部を特定するのは無理だが(このコードに限らず，そもそも無意味)，実用的な範囲では使えそうな感じだ．</description>
    </item>
    
    <item>
      <title>コマンドラインでスクリーンショット</title>
      <link>https://matutosi.github.io/post/20230806/</link>
      <pubDate>Sun, 06 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20230806/</guid>
      <description>Windowsで画面のスクリーンショットをとるにはPrtScを押せば良いが，コマンドラインから取りたいときには不便． コマンドラインからできないか探したら，C# でつくったものがあった． .net frameworkは必要だが，&amp;ldquo;selfcompiled C# program&amp;quot;とのことなので，batを実行すれば勝手にexeが生成される． これはすごい．
 https://superuser.com/questions/75614/take-a-screen-shot-from-command-line-in-windows#answer-943947 https://github.com/npocmaka/batch.scripts/blob/master/hybrids/.net/c/screenCapture.bat  また，下のところにあるコードはマルチディスプレイにも対応している．
 https://superuser.com/questions/75614/take-a-screen-shot-from-command-line-in-windows  </description>
    </item>
    
    <item>
      <title>Windowsのユーザ名のその後</title>
      <link>https://matutosi.github.io/post/20230731/</link>
      <pubDate>Mon, 31 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20230731/</guid>
      <description>少し前にWindows11のユーザ名変更について書いたが，別のPCでやったら色々と大変なことになった． その後なんとか修復したけど，普通にやりたい場合は，ネットで検索して出てくるものを参考にしたほうが良さそうだ．</description>
    </item>
    
    <item>
      <title>干し草の中から針を探す</title>
      <link>https://matutosi.github.io/post/20230730/</link>
      <pubDate>Sun, 30 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20230730/</guid>
      <description>PythonのPyAutoGUIには，画像認識をしてボタンをクリックする機能があるのだが(正確にはpyscreezeの機能)，RのKeyboardsimulatorには，それがない． PyAutoGUIからコードを辿って見ていくと，Confidenceの設定(Confidenceの設定はOpenCV使用)をしない場合は，単純に画像を端から一致するか判定しているみたいだ． これだったら，自分の力とRで実装できそう． 速度が遅ければ，検索部分のループだけ(ほぼCの)C++で書こう．
ところで，画像認識のコードに，needleImage と haystackImage という変数がでてくる． 一瞬何のことか分からなかったが，「干し草の中から針を探す」だ． すごく良い変数名だ． 自分のコードにもこのネーミングを使う予定だ．</description>
    </item>
    
    <item>
      <title>Windowsのユーザ名</title>
      <link>https://matutosi.github.io/post/20230725/</link>
      <pubDate>Tue, 25 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20230725/</guid>
      <description>Windows11のパソコンを複数台使っている． 初期設定のときに合わせればよかったのだが，ユーザ名(表示名も，実際のユーザー名)が異なっている． アプリケーションごとに保存されるデータが，C:\Users\USERNAME\AppData\Local\ (USERNAME：ユーザアカウント名)にあってここを指定するときに微妙にコードが異なってくるのがめんどくさい． %USERNAME%とかで処理していれば良いが，直接書いていることもあるためだ．
表示名(フルネーム)はわりと簡単に変更できるが，これを変更しても実際のユーザー名(ユーザーアカウント名)はそのまま残る． そのため，上記のユーザフォルダは変更されずにそのまま残っていた．
ユーザフォルダの名前を変更しようとしても，できないようになっている(そりゃそうだ)． レジストリの以下を変えると，フォルダ名を変更できるようになる．
コンピューター\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList
ProfileImagePath
 https://pc-karuma.net/change-windows-11-user-folder-name/  ユーザやシステムの環境変数のPATHは，変更前のままなので変更する．
よくわからないけど，PC上の設定も変更前のままだったら，以下を参考にしてユーザーネームを変更する．
 https://osechi-tech.net/windows11-username-change-method/  多分だがこれぐらいやっておけば，だいたいできた感じだろう．</description>
    </item>
    
    <item>
      <title>pivotea 1.0.1</title>
      <link>https://matutosi.github.io/post/20230716/</link>
      <pubDate>Sun, 16 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20230716/</guid>
      <description>Rでピボットテーブルのようなものをつくるためのパッケージpivoteaを更新した． ホグワーツのデータを追加し，ちょっとバグを修正．
 https://cran.r-project.org/web/packages/pivotea/ https://github.com/matutosi/pivotea/  </description>
    </item>
    
    <item>
      <title>R Package Scholar</title>
      <link>https://matutosi.github.io/post/20230629/</link>
      <pubDate>Thu, 29 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20230629/</guid>
      <description>R Package Scholarというのがあるらしく，pivoteaがこれに登録されたとの電子メールが届いた． &amp;ldquo;pivotea is quite a useful package so we created some page tools for it!&amp;ldquo;だとさ． たぶん，いろんなところに送っているのだろうけど，褒められるのは嬉しい．
 https://scholar.rpkg.net/authordetails.php?author=Toshikazu+Matsumura https://github.com/matutosi/pivotea/  </description>
    </item>
    
    <item>
      <title>hogwarts</title>
      <link>https://matutosi.github.io/post/20230617/</link>
      <pubDate>Sat, 17 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20230617/</guid>
      <description>pivotea (pivot easy)の時間割データとして良いものがないか探していたら，ホグワーツ魔法魔術学校の時間割を見つけた．
 https://github.com/Arcfej/HogwartsTimetable/  </description>
    </item>
    
    <item>
      <title>pivotea</title>
      <link>https://matutosi.github.io/post/20230616/</link>
      <pubDate>Fri, 16 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20230616/</guid>
      <description>Rでピボットテーブルのようなものをつくるためのパッケージpivoteaを作成した． 主な関数は，pivot()のみ． 詳細は以下を参考にして欲しい．
 https://cran.r-project.org/web/packages/pivotea/index.html https://github.com/matutosi/pivotea/  tidyなデータフレームをもとにして，列(row，縦)・行(col，横)・値(value，セルの中身)・分割(split)にそれぞれ配置したい列を文字列指定するだけで簡単にピボットテーブルのようなものが作れる． tidyr::pivot_wider(), tidyr::pivot_longer()でもピボットはできるが，同一セルに複数の値が入るときの処理が面倒くさい． 複数の値がある場合は，pivot()では縦に別の行として並べるところが，工夫点である． 同じコマに重複する科目があるときの時間割を作成するのに便利である(というか，それを目的に関数を作成した)． 以下のvignettesでは，このことが分かりにくいかもしれないと思ったので，時間割のデータを追加する予定．
 vignettes: https://cran.r-project.org/web/packages/pivotea/vignettes/pivoteasy.html  </description>
    </item>
    
    <item>
      <title>GPT-3</title>
      <link>https://matutosi.github.io/post/20230322/</link>
      <pubDate>Wed, 22 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20230322/</guid>
      <description>OpenAIのGPT-3に登録して，ちょっと遊んでみた． 文章生成やチャットをしてくれる． 内容的にはびっくりするぐらいよくできているが，具体性が少なく，どこかから取ってきた文章みたいで，内容自体には面白みに欠ける．
GitHubのcoplilotもちょっと試してみた． これは，プログラムをAIがサポートするもので，コメントを書くだけでコードを提案してくれてすごく便利だ． ただ，誰かが書いたコードをなぞっているという感じで，全く新しいプログラムを想像しているわけではない． そのため，自分は具体的なコードを知らないけど，たぶん誰かが既に考えてるだろうというものを書く(勉強する)のに向いているとは思う． 一方，個別の事案や全く新しいものを作り出すのはやっぱり自分の頭が必要だ．</description>
    </item>
    
    <item>
      <title>ドンピシャな検索結果</title>
      <link>https://matutosi.github.io/post/20230131/</link>
      <pubDate>Mon, 30 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20230131/</guid>
      <description>web茶まめという形態素解析ができるページがある． このページは非常に便利で，テキストを貼り付けるかファイルをアップロードすれば形態素解析の結果を得ることができる． ただし，APIが整備されておらず，このページを使うには手作業での作業が必要である． そこで，Rとrvestを使って作業を自動化することにした． 自動化のための関数が一応できた． 関数のコードはまだまだ改善の余地はあるだろうが，とりあえずは動く． 本来ならば関数の作成前に検索すべきだったが，完成作成後にweb茶まめをRで使うツールが既にあるかもしれないと思った． &amp;ldquo;chamame in r&amp;quot;で検索したところ，&amp;ldquo;Analyzed data of neko by chamame - R&amp;quot;となんともドンピシャな検索結果が出てきた． あまりにドンピシャ過ぎるのでちょっとびっくりしたが，恐る恐るリンクをクリックすると，自分のページだった． そりゃそうだな． ちなみに，このページの説明は手作業で取得したデータについてである．
 web茶まめ https://chamame.ninjal.ac.jp/index.html https://github.com/matutosi/moranajp/blob/develop/R/moranajp.R https://github.com/matutosi/moranajp/blob/develop/man/web_chamame.Rd  </description>
    </item>
    
    <item>
      <title>バグ</title>
      <link>https://matutosi.github.io/post/20230125/</link>
      <pubDate>Wed, 25 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20230125/</guid>
      <description>バグは恐ろしいものである． 恐ろしい理由は2つある．
1つ目は，バグだと知らずにプログラムを実行してしまう場合があるためである． その場合は，間違って得た結果を正しいものとして捉えてしまう． このような間違った結果をバグだと分かれば良いが，バグだと分からないと非常に恐ろしい．
2つ目は，なかなかバグの原因を見つけられないためだ． 原因を見つけにくい理由は，プログラマ(自分)の思い込みがある． ここにはバグが無いだろうと考えているところにバグが潜んでいることが多々ある． Rのパッケージへの機能の追加中にバグがあることが分かった． バグの原因究明に1日以上を費やしてようやく原因が判明した． バグの発生箇所は，なんとなく予想していた． ただ，なかなか最終的な箇所の特定ができずにいた． こんな箇所にバグはないだろうと思い込んでいた場所でバグが発生していた． 修正するべき箇所が判明して，コードの修正はほんの数分で完了した． バグを見つけるまでに約1日半ぐらい，修正に数分． 本当にバグは恐ろしい．
ただし，バグにも良い副作用はある． バグを探している中でコードの改善を見つけて修正したり，新しい関数の使い方を覚えたり，関数の使い方を覚え直したりなどもできた．</description>
    </item>
    
    <item>
      <title>テスト駆動開発</title>
      <link>https://matutosi.github.io/post/20230103/</link>
      <pubDate>Tue, 03 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20230103/</guid>
      <description>テスト駆動開発というのは知っていたが，正直なところ面倒くさい感じがして，ちゃんと使っていなかった． ちょっとしたことだが，作ってみたいプログラムがあって，テスト駆動形で試してみた． 入力と出力が頭の中で整理されているのであれば(そうあるべきだが)，テストを先に作っておいてプログラムを書くのはすごく楽だとわかった．</description>
    </item>
    
    <item>
      <title>BiSS</title>
      <link>https://matutosi.github.io/post/20221123/</link>
      <pubDate>Tue, 22 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20221123/</guid>
      <description>生物多様性調査支援システムを大幅に見直し中．
https://matutosi.github.io/biodiv/biodiv2.html
せっかくPCやタブレットを使うのだから，よく出てくる種名は手入力せずとも選ぶだけにできるようにした． その他，地点ごとの出現種の表示(組成表みたいなもの)なども表示するようにした．</description>
    </item>
    
    <item>
      <title>BiSS</title>
      <link>https://matutosi.github.io/post/20221107/</link>
      <pubDate>Mon, 07 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20221107/</guid>
      <description>植生調査にも使える生物多様性調査支援システムを作成中であることを植生学会の大会で発表した．
https://matutosi.github.io/biodiv/biodiv.html
ただ，コードを見直すと，あまりにも汚い． 汚いというか，重複したものがたくさんあって，維持管理のときに困りそう． JavaScriptのプログラムを書くのが，ほぼ初めてのため，関数をどのぐらいのものにするかなど，あまり考えずに手当たり次第に作ったのが原因だ．
全体の形ができたので，設計し直しつつ，コードも整えようと思う．</description>
    </item>
    
    <item>
      <title>clidatajp</title>
      <link>https://matutosi.github.io/post/20220929/</link>
      <pubDate>Thu, 29 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20220929/</guid>
      <description>CRANからの返事があり，細かな修正点が3つあった．修正して，再投稿した．
  DESCRIPTIONファイルのdescriptionフィールドには，ウエブサイトをhttp://...のように入れること．
  Please provide a link to the used webservices to the description field of your DESCRIPTION file in the form http:... or https:... with angle brackets for auto-linking and no space after &amp;lsquo;http:&amp;rsquo; and &amp;lsquo;https:&amp;rsquo;.
  関数の戻り値をちゃんと書き，戻り値がない場合は，「No return value, called for side effects」のようにすること．
  Please add \value to .Rd files regarding exported methods and explain the functions results in the documentation. Please write about the structure of the output (class) and also what the output means.</description>
    </item>
    
    <item>
      <title>clidatajp</title>
      <link>https://matutosi.github.io/post/20220926/</link>
      <pubDate>Mon, 26 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20220926/</guid>
      <description>clidatajpというパッケージを作った． CRANからの返事はまだ無い． どこで処理が止まっているのかは，とんと見当がつかない．
https://github.com/matutosi/clidatajp/blob/main/READMEjp.md
ウソです．普通に時間がかかっているだけだと思います．</description>
    </item>
    
    <item>
      <title>RのNSE(Non-Standard Evaluation)</title>
      <link>https://matutosi.github.io/post/20220914/</link>
      <pubDate>Wed, 14 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20220914/</guid>
      <description>RのNSE(Non-Standard Evaluation)というのがあって，便利な面とそうでない面がある． 本来なら，列名を指定するのに，&amp;ldquo;displ&amp;quot;のように指定すべきところを，ダブルクオーテーションなしでdisplとできるので，普段は便利だ．
library(tidyverse)mpg %&amp;gt;%dplyr::select(displ, year, cyl) ただし，パッケージ開発をするときにこの使い方をしていると，devtools::check()でWarningsとかNotesの対象になる． 新たな列名として使いたいときには，以下のようにする必要がある．変数に入れた文字列を使う時，既存の列の指定では.data[col_nameとして，新たな列のときは{{col_name}}({{&amp;ldquo;year_displ&amp;rdquo;}}はエラー)とする．
col_1 &amp;lt;- &amp;#34;year&amp;#34;col_2 &amp;lt;- &amp;#34;displ&amp;#34;new_col &amp;lt;- &amp;#34;year_displ&amp;#34;# `:=`を通常の関数みたいに使用mpg %&amp;gt;%dplyr::transmute(`:=`({{new_col}}, stringr::str_c(.data[[col_1]], &amp;#34;_&amp;#34;, .data[[col_2]])))# 以下でも同じmpg %&amp;gt;%dplyr::transmute({{new_col}} := stringr::str_c(.data[[col_1]], &amp;#34;_&amp;#34;, .data[[col_2]])) </description>
    </item>
    
    <item>
      <title>正規表現</title>
      <link>https://matutosi.github.io/post/20220910/</link>
      <pubDate>Sat, 10 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20220910/</guid>
      <description>「詳説 正規表現」を読み始めた． まだ1章しか読んでないが，結構勘違いしていたことや知らなかったことが多い．</description>
    </item>
    
    <item>
      <title>MacでSelenium</title>
      <link>https://matutosi.github.io/post/20220905/</link>
      <pubDate>Mon, 05 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20220905/</guid>
      <description>準備：色々とインストール
# Homebrew/bin/bash -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&amp;#34;# Chorome driverbrew install chromedriver# javabrew tap AdoptOpenJDK/openjdkbrew install --cask adoptopenjdk12# check java installationjava -version# download seleniumcurl -OL https://selenium-release.storage.googleapis.com/3.141/selenium-server-standalone-3.141.59.jarmv selenium-server-standalone-3.141.59.jar /Applications/ seleniumの実行と
# run seleniumjava -jar /Applications/selenium-server-standalone-3.141.59.jar# ちょっとまっていると色々と表示される# check process idps -A | grep &amp;#39;java&amp;#39;# 12708 ttys000 0:00.20 /usr/bin/java -jar /Applications/selenium-server-standalone-3.141.59.jar# 12802 ttys000 0:00.00 grep java# stop selenium# 数字は1行目の左端に表示されるprocess idを入力kill 12708 </description>
    </item>
    
    <item>
      <title>RSelenium</title>
      <link>https://matutosi.github.io/post/20220821/</link>
      <pubDate>Sun, 21 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20220821/</guid>
      <description>RからSeleniumを操作しようとだいぶ前に色々とやっていたが，RSeleniumが動かず断念した． 一応，Pythonでやりたいことはしたが，それでもやはりRが慣れていて便利なので，再挑戦した． 色々と試した結果，Seleniumのバージョンが4.0以上の場合は，RSeleniumが動かないことがわかった． バージョン2や3だとうまく動いた．
Pythonで書いたコードをRに書き換えた． Pythonではdatarを使っていたので，Rへの移植はそれほど難しくなかった．</description>
    </item>
    
    <item>
      <title>datar</title>
      <link>https://matutosi.github.io/post/20220801/</link>
      <pubDate>Mon, 01 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20220801/</guid>
      <description>JavaScriptでのウェブページ操作で，ページ移動のたびにlocalStorageやsessionStorageから関数群を引き出すというトリッキーな使い方をしていた． これはこれで良いが，結局手作業が必要なのが不便だ．
そこでSeleniumを導入して自動化を試みたものの，RSeleniumがどうもうまくいかない． Pythonならつながるので，Selenium自体やChromeDriverはちゃんと動いているようだ． 仕方ないので，Pythonで操作しはじめたが，Rのtidyverseの便利さには敵わない． と思っていたら，datarというPythonのライブラリを見つけた． できる限りtidyverseとほぼ同じようにやってしまおうというライブラリのようだ． 試しに使ってみたら，ほとんどRの書き方でできる． これは便利だ． datarに慣れるとPythonを使っているのか，Rを使っているのか分からなくなりそう． まあ，そもそも使えれば良いので，そんなことはどっちでも良い．</description>
    </item>
    
    <item>
      <title>sessionStorage</title>
      <link>https://matutosi.github.io/post/20220727/</link>
      <pubDate>Wed, 27 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20220727/</guid>
      <description>正規のHTML内に書かれた操作ではなく，デベロッパーツールのConsoleにJavaScriptを打ち込んでウェブページを色々と操作しようとしている． ページが移動すると，関数がクリアされるのが難点だ． sessionStorageを使って，関数やその他のデータを保存しておけば，なんとかなりそうだ． ただし，すごくトリッキーな使い方で，本来の使い方ではなさそう．</description>
    </item>
    
    <item>
      <title>プログラミングと文章の構造化</title>
      <link>https://matutosi.github.io/post/20220726/</link>
      <pubDate>Tue, 26 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20220726/</guid>
      <description>プログラムを書いていると文章を構造的に書くのに役立つと思う． 関数が1つの段落だとすると，関数のトピックセンテンスは返り値である． 何を出力したいかが明確でないと，関数は書けない．
ある関数から次の関数につなぐのは，引数や返り値である． これによってプログラムがつながっていく． 文章もキーワードなどによってつながっていく．</description>
    </item>
    
    <item>
      <title>手作業とスクリプト</title>
      <link>https://matutosi.github.io/post/20220720/</link>
      <pubDate>Wed, 20 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20220720/</guid>
      <description>JavaScriptを勉強していると，普段使うwebツール上でマウスを駆使してクリックしているのがアホらしくなってきた． 一度だけの作業ならまだしも，同じような作業の繰り返しを定期的にしなければならないことがある． チェックボックスを探してそれをクリックするなどだ． 手作業で同じことをするのは面倒だし，間違いのもとである． JavaScriptで，使いそうなスクリプトを組んでみた． たぶん，それなりに使えそうな感じ．
手を抜くための苦労はいとわない．</description>
    </item>
    
    <item>
      <title>関数・ドキュメントの整理</title>
      <link>https://matutosi.github.io/post/20220712/</link>
      <pubDate>Tue, 12 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20220712/</guid>
      <description>植生調査アプリの基本機能のスクリプトは完成にかなり近づいた． ただ，コードを書きなぐってきたので，コードが汚すぎる． JavaScriptのコーディングスタイルに合っていないのは仕方ないとして， たぶん，不要な関数があったり，関数の引数が統一されていなかったりするあたりは整理が必要だ． どれが不要な関数かどうかはよく確認しないといけない． 一応，関数の関係性を確認するコードをRで書いたので，それを使って不要な関数を洗い出そうとするが，うまくいくかどうか． 関数の説明をちゃんと書いていないのも問題だ． このあたりは，徐々に整理する予定．</description>
    </item>
    
    <item>
      <title>CSSでレスポンシブ・レイアウト</title>
      <link>https://matutosi.github.io/post/20220711/</link>
      <pubDate>Mon, 11 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20220711/</guid>
      <description>HTMLのtableはデータの整理には便利だが，項目が多くなると1行がどんどんと横に長くなってしまう． パソコンであれば良いが，スマホやタブレットではちょっと使いづらい． そこでレイアウトをレスポンシブ(画面サイズに合わせた表示)にする必要がある． そのあたりの変更を自動でしても良いが，植生調査アプリでは使用者がボタンを押して切り返す仕組みにした． ボタンを押すと，JavaScriptでスタイルを書き換えて，表示を途中で折り返すようにした． だいぶできてきた．
 アプリ(CSS/JavaScript別ファイルバージョン) https://matutosi.github.io/biodiv/biodiv.html アプリ(1ファイルバージョン) https://matutosi.github.io/biodiv/biss.html 使用例 https://matutosi.github.io/biodiv/exam01.html  </description>
    </item>
    
    <item>
      <title>this</title>
      <link>https://matutosi.github.io/post/20220703/</link>
      <pubDate>Sun, 03 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20220703/</guid>
      <description>JavaScriptでのthisはよくは分かっていないが，使い方によってはすごく便利． inputタグのところで，とりあえず&amp;quot;onclick&amp;quot; =&amp;ldquo;fun(this)&amp;ldquo;としておけばあとでなんとかなりそう． 取り出しは，&amp;ldquo;this&amp;quot;や&amp;quot;this.parentNode;&amp;quot;(さらに親Nodeが欲しければ，&amp;quot;.parentNode&amp;quot;を追加)でなんとかなりそう．</description>
    </item>
    
    <item>
      <title>植生調査アプリの仮公開</title>
      <link>https://matutosi.github.io/post/20220628/</link>
      <pubDate>Tue, 28 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20220628/</guid>
      <description>引き続き，植生調査アプリは完成まではまだまだだが，なんとなく形はできていた．
とりあえず現状は以下のURLのような感じ．
https://matutosi.github.io/biodiv/biodiv.html</description>
    </item>
    
    <item>
      <title>ShinyとJavaScript</title>
      <link>https://matutosi.github.io/post/20220627/</link>
      <pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20220627/</guid>
      <description>引き続き，植生調査アプリのコーディングをしている． JavaScriptのお作法は相変わらずよくわかっていないが，Shinyでのアプリ作成やRのパッケージ作成の経験が活用できている気がする． Shinyではmodule化することで，コードを簡潔に書くことができる．
 https://github.com/matutosi/textmining https://github.com/matutosi/ecanvis https://github.com/matutosi/moranajp  Shinyの内部で具体的にどのようなことがされているのかまでは確認していないが，たぶんこんな感じだろうと想像しながらmodule化している． そのおかげで，汎用的に使えるものができそう．
ただ，コードを書き散らしているので，説明の文書が中途半端な状態だ． また，関数の入出力を統一できていないし，未使用の関数も残っている． このあたりの整理は今後ぼちぼちとする予定．</description>
    </item>
    
    <item>
      <title>DeepL API</title>
      <link>https://matutosi.github.io/post/20220623/</link>
      <pubDate>Thu, 23 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20220623/</guid>
      <description>Google翻訳も良いが，DeepLの翻訳は結構自然で良い． APIが使えるのはしばらく前から知っていたが，手を出していなかった． ちょっと調べると簡単に使えそう．
https://qiita.com/yaju/items/bf4613393cd4ee402d17
上のページのものをちょっと改変してJavaScript版で作ってみた． APIは自分で取得して，それを入力する必要がある(16行目)．
https://gist.github.com/matutosi/01bbc564ba3ae249f121965dc725b649</description>
    </item>
    
    <item>
      <title>JavaScript</title>
      <link>https://matutosi.github.io/post/20220622/</link>
      <pubDate>Wed, 22 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20220622/</guid>
      <description>JavaScriptはブラウザさえあれば，実行できるのが良い． GoogleChromeであれば，F12でコンソールなどが出てきて，テストやデバッグができる． オブジェクトの中身もブラウザの中身と対比して見ながら，チェックできる． コンソールの補完機能も便利だ．</description>
    </item>
    
    <item>
      <title>JavaScript</title>
      <link>https://matutosi.github.io/post/20220620/</link>
      <pubDate>Mon, 20 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20220620/</guid>
      <description>昔は，JavaScriptを「Webページを飾り付けるだけのもの」のように考えていた． 自分自身もそんな感じで使っていたときがあった． でも，JavaScriptでコードを書いていると，結構色々なことができることがわかってきた．
jQueryとかReactとかいろんなフレームワークもあるけど，とりあえずはvanilla JavaScript(フレームワークを使わない基本的なものだけ)でやっている．</description>
    </item>
    
    <item>
      <title>植生調査アプリ(大枠)</title>
      <link>https://matutosi.github.io/post/20220617/</link>
      <pubDate>Fri, 17 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20220617/</guid>
      <description>植生調査アプリをHTMLとJavaScriptで作っている． JavaScriptにも徐々になれてきて，大体の大枠ができた(ような気がする)． ネットの情報や書籍を参考にしたが，JavaScriptのお作法をちゃんとは理解できていない． そのため，JavaScriptらしくない我流のコードになっている(はず)． mapとかapplyを使えば，もっと単純に書けそうだと思う部分がある． でも使い方が分からないので，forループを回しまくった．
それでも，他のコードを参考にしつつもだいたい理解して，ほとんどのコードを自分で書くことができた． コードを書いている途中で，たくさん関数を作ったが，結果的に使っていない関数も色々とある． とりあえずは整理して，必要なものだけに絞らなければ．</description>
    </item>
    
    <item>
      <title>植生調査アプリ</title>
      <link>https://matutosi.github.io/post/20220611/</link>
      <pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20220611/</guid>
      <description>しばらく前にSwiftでiOS用の植生調査アプリを作りかけていた． そこそこのところまではできてきたが，ちょっと行き詰まっていた．
JavaScriptでいちから作り直しているが，こっちのほうが簡単にできそう． iOSだけでなくAndroidやWindowsでも使えるはず． HTML, JavaScript, cssだけで作っている． これらのファイルをローカル環境にダウンロードすれば簡単に使えるようになるはずだ． AppStoreとかGooglePlayに登録せずとも，GitHubからダウンロードできるようにすれば良いので管理も簡単だ． HTML, JavaScript, cssをちょっと勉強すれば，カスタマイズもできるだろう．</description>
    </item>
    
    <item>
      <title>JavaScriptの勉強</title>
      <link>https://matutosi.github.io/post/20220609/</link>
      <pubDate>Thu, 09 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20220609/</guid>
      <description>植生調査アプリを作成するのに，JavaScriptを勉強中． そういえば，学生のときにホームページを作ってJavaScriptを作っていた． 嬉しがって，ページを移動するたびに「本当に良いですか」のようなポップアップを出すスクリプトを書いていた． 知人から「鬱陶しいからやめて」と言われたのを思い出す．</description>
    </item>
    
    <item>
      <title>ひっそりと</title>
      <link>https://matutosi.github.io/post/20220608/</link>
      <pubDate>Wed, 08 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20220608/</guid>
      <description>ひっそりとブログを再開，というか適当にメモを書く予定．
とりあえず，HugoでthemeはMainraodで開始した． themeは変更の可能性あり．</description>
    </item>
    
    <item>
      <title>タイトル</title>
      <link>https://matutosi.github.io/post/20259999/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20259999/</guid>
      <description>文章
 https://github.com/matutosi/  </description>
    </item>
    
  </channel>
</rss>
