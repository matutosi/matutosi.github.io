<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>etc on matutosi</title>
    <link>https://matutosi.github.io/tags/etc/</link>
    <description>Recent content in etc on matutosi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp-jp</language>
    <lastBuildDate>Wed, 16 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://matutosi.github.io/tags/etc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rによる自動化・効率化レシピ集</title>
      <link>https://matutosi.github.io/post/20250716/</link>
      <pubDate>Wed, 16 Jul 2025 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20250716/</guid>
      <description>森北出版から「Rによる自動化・効率化レシピ集」のページができていた． 結構時間がかかってしまった．
 https://www.morikita.co.jp/books/mid/085831 https://www.amazon.co.jp/dp/4627858310/  </description>
    </item>
    
    <item>
      <title>Streamlit</title>
      <link>https://matutosi.github.io/post/20250326/</link>
      <pubDate>Wed, 26 Mar 2025 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20250326/</guid>
      <description>PythonのパッケージStreamlitを使って，植生調査の組成表のCORを簡単にできるようなwebアプリを作ろうとしている． 組成表の物体検出にはDetectron2を使っていたが環境によってイントールが難しい． そこで物体検出にはYOLOを使うことにした． 比較的簡単に使えるし，Streamlitでも使えそう(ちょっと工夫は必要だったが)．
ところで，Streamlitを使ったものはいろんなアプリがあって楽しい．
 https://share.streamlit.io/explore?sort=most+viewed&amp;amp;category=favorites  他にも使えるものはあるのだろうが，背景を除外してくれるものは簡単に試せる．
 https://bgremoval.streamlit.app/  </description>
    </item>
    
    <item>
      <title>ドキュメントはAIに依頼しよう</title>
      <link>https://matutosi.github.io/post/20250317/</link>
      <pubDate>Mon, 17 Mar 2025 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20250317/</guid>
      <description>pivoteaのPython版が一応ちゃんと動くようになった(ハズ)． 説明の文章はマダ． でも，このあたりはAIに依頼すれば結構良い感じでまとめてくるので，だいぶ楽だ． コードを書くのは割と楽しいけど，ドキュメントを書くのは結構しんどい．
 https://github.com/matutosi/pivoteapy  </description>
    </item>
    
    <item>
      <title>整理の重要性</title>
      <link>https://matutosi.github.io/post/20250314/</link>
      <pubDate>Fri, 14 Mar 2025 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20250314/</guid>
      <description>もろもろのコードや文章を作ったときには詳しい内容を覚えている． でも，ちゃんと整理しておかないと内容をすぐに忘れてしまう． 特に時間が立つと最初から内容を理解しないといけなくなる．
分かってはいるが，後からでもわかるぐらいに整理しておくのが大事だ．
研究でちょっとしばらく触っていなかったコードを整理するのに苦戦している．</description>
    </item>
    
    <item>
      <title>pivoteapy</title>
      <link>https://matutosi.github.io/post/20250313/</link>
      <pubDate>Thu, 13 Mar 2025 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20250313/</guid>
      <description>時間割などのような文字列のピボットテーブルをするために，pivoteaというパッケージをRで作った．
 https://github.com/matutosi/pivotea  また，それをもとにしたwebアプリも作った．
 https://github.com/matutosi/convex  最近はPythonを勉強しているので，練習を兼ねてpython版を作成している． しっかりしたライブラリにまとめるにはかなりの時間がかかるが，基本的な動作自体はだいたいできてきた．</description>
    </item>
    
    <item>
      <title>週間の縦型カレンダーを生成するアプリ</title>
      <link>https://matutosi.github.io/post/20250308/</link>
      <pubDate>Sat, 08 Mar 2025 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20250308/</guid>
      <description>カレンダーは毎年週間の縦型のもので，自作のものを使っている． 市販品ではメモ欄が一番左にあるが，自分の好みである一番右にしている． また，定型の予定は事前にプログラムで書き込んでいた． 最近，Pythonを勉強しているので，TeX版をPythonに書き直した． だいたい求めるものができた．
さらに，streamlitというwebアプリ作成のライブラリがあるので，web版にしてみた． 個人の好みはそれぞれなので，1月始まり・4月始まり，レイアウトの左寄せ・右寄せ，日曜日・月曜日始まり，1日の開始・終了時刻はweb版ではカスタマイズできるようにした．
 https://vercal.streamlit.app/  定型の予定は以下の形式のエクセルファイルを作れば，繰り返してくれる．
   period_start period_end week_of_day event_start event_end event except     2025-04-10 2025-07-10 wed 10:30 12:00 数学 2025-05-07;2025-05-14   2025-04-10 2025-07-10 mon 12:30 12:30 開始のみの予定     定型予定のファイルの詳細は以下を参照してほしい． コードもすべて公開している．
 https://github.com/matutosi/vercal  使い方は，なんとなくわかりそうだとは思う． でも，説明はまだ全然なので今後整理していこう．</description>
    </item>
    
    <item>
      <title>pivoteaとpivoteapy</title>
      <link>https://matutosi.github.io/post/20250224/</link>
      <pubDate>Mon, 24 Feb 2025 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20250224/</guid>
      <description>pivoteaのPythonの関数自体はできてきた．
せっかくなので，Pythonの環境がなくても実行できるように，TkEasyGUIとPyinstallerを使ってexeにする予定．</description>
    </item>
    
    <item>
      <title>pivoteaとpivoteapy</title>
      <link>https://matutosi.github.io/post/20250220/</link>
      <pubDate>Thu, 20 Feb 2025 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20250220/</guid>
      <description>pivoteaというRのパッケージをPythonに変換している． Geminiに相談してコードを変換したが，やはりそのままでは駄目で，エラーがでる． でも，Pythonにも少し慣れてきたので，ちょっとずつデバグしていったら，それなりには動くものになってきた． うまくできたら，&amp;ldquo;pivoteapy&amp;quot;として公開できるかもしれない．
Pythonののパッケージとしてまとめるだけでなく，さらにPythonからRに戻すと，言語の翻訳と同じでRのコードが簡潔になるような気がする．
例：不自然な英語 &amp;ndash;(AIで翻訳)&amp;ndash;&amp;gt; 他の言語 &amp;ndash;(AIで翻訳)&amp;ndash;&amp;gt; 自然な言語
Geminiにリファクタリングを頼むのとどちらがきれいなコードになるのか試してみよう．
 https://cran.r-project.org/web/packages/pivotea/index.html  </description>
    </item>
    
    <item>
      <title>easypdf</title>
      <link>https://matutosi.github.io/post/20250218/</link>
      <pubDate>Tue, 18 Feb 2025 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20250218/</guid>
      <description>easypdfでPDFの文字列を強調表示するものを作成した．
 https://github.com/matutosi/easypdf  </description>
    </item>
    
    <item>
      <title>easypdf</title>
      <link>https://matutosi.github.io/post/20250205/</link>
      <pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20250205/</guid>
      <description>easypdfというのを作った． 作ったというほどのものではないが，Windowsの .exe 形式の実行ファイルなのでプログラミングをせずとも使える．
とりあえずは，PDFの結合をするだけのものを公開した． 使い方は以下をご覧ください．
 https://github.com/matutosi/easypdf  </description>
    </item>
    
    <item>
      <title>発表資料</title>
      <link>https://matutosi.github.io/post/20241006/</link>
      <pubDate>Sun, 06 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20241006/</guid>
      <description>論文とか学会発表などの資料の公開ページへのリンク．
 https://www.dropbox.com/s/wz0c13ksncvjh3k/link.txt?dl=0  </description>
    </item>
    
    <item>
      <title>GPT-3</title>
      <link>https://matutosi.github.io/post/20230322/</link>
      <pubDate>Wed, 22 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20230322/</guid>
      <description>OpenAIのGPT-3に登録して，ちょっと遊んでみた． 文章生成やチャットをしてくれる． 内容的にはびっくりするぐらいよくできているが，具体性が少なく，どこかから取ってきた文章みたいで，内容自体には面白みに欠ける．
GitHubのcoplilotもちょっと試してみた． これは，プログラムをAIがサポートするもので，コメントを書くだけでコードを提案してくれてすごく便利だ． ただ，誰かが書いたコードをなぞっているという感じで，全く新しいプログラムを想像しているわけではない． そのため，自分は具体的なコードを知らないけど，たぶん誰かが既に考えてるだろうというものを書く(勉強する)のに向いているとは思う． 一方，個別の事案や全く新しいものを作り出すのはやっぱり自分の頭が必要だ．</description>
    </item>
    
    <item>
      <title>ドンピシャな検索結果</title>
      <link>https://matutosi.github.io/post/20230131/</link>
      <pubDate>Mon, 30 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20230131/</guid>
      <description>web茶まめという形態素解析ができるページがある． このページは非常に便利で，テキストを貼り付けるかファイルをアップロードすれば形態素解析の結果を得ることができる． ただし，APIが整備されておらず，このページを使うには手作業での作業が必要である． そこで，Rとrvestを使って作業を自動化することにした． 自動化のための関数が一応できた． 関数のコードはまだまだ改善の余地はあるだろうが，とりあえずは動く． 本来ならば関数の作成前に検索すべきだったが，完成作成後にweb茶まめをRで使うツールが既にあるかもしれないと思った． &amp;ldquo;chamame in r&amp;quot;で検索したところ，&amp;ldquo;Analyzed data of neko by chamame - R&amp;quot;となんともドンピシャな検索結果が出てきた． あまりにドンピシャ過ぎるのでちょっとびっくりしたが，恐る恐るリンクをクリックすると，自分のページだった． そりゃそうだな． ちなみに，このページの説明は手作業で取得したデータについてである．
 web茶まめ https://chamame.ninjal.ac.jp/index.html https://github.com/matutosi/moranajp/blob/develop/R/moranajp.R https://github.com/matutosi/moranajp/blob/develop/man/web_chamame.Rd  </description>
    </item>
    
    <item>
      <title>タイトル</title>
      <link>https://matutosi.github.io/post/20259999/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20259999/</guid>
      <description>文章
 https://github.com/matutosi/  </description>
    </item>
    
  </channel>
</rss>
