<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>r on matutosi</title>
    <link>https://matutosi.github.io/tags/r/</link>
    <description>Recent content in r on matutosi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp-jp</language>
    <lastBuildDate>Tue, 08 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://matutosi.github.io/tags/r/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>画像位置の特定</title>
      <link>https://matutosi.github.io/post/20230808/</link>
      <pubDate>Tue, 08 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20230808/</guid>
      <description>画像認識してボタンをクリックするのを自動化するために，Rでコードを書いていたら，やはり使いものにならないぐらい遅かった． そこで，Rcppを使ってC++で書き直した． 最低でも10倍，うまくいけば50倍ぐらいになると思っていたが，3倍ぐらいの速度にしかならない． しかも，場合によっては3倍ぐらい遅いこともある． たぶん，C++の書き方が良くないのだと思うが，別の方法で実装することにした．
同じような色だけの画像を認識するのは難しいが，通常
1 needle_imageとhaystack_imageの各ピクセルで共通する色を抽出
2 抽出した色のうちhaystack_imageで出現頻度の少ないものから1つ選んでneedle_imageでの位置を把握 3 needle_imageでの位置をもとに，haystack_imageの基準点(1,1)を抽出 4 出現頻度の少ないものから，順次2と3を繰り返し 5 haystack_imageの基準点が1つに絞れたら，それが探し出そうとしている画像の基準点と一致しているはず
全ピクセルの一致を目指しているのではないので，厳密な一致はしない可能性はあるが，画像があれば必ず一致するはずだ． 厳密な一致を求めるときは，最後にチェックを入れれば良い．
ということで，コードを書いたら結構速い速度になって，満足． 単一色の画像の中からその一部を特定するのは無理だが(このコードに限らず，そもそも無意味)，実用的な範囲では使えそうな感じだ．</description>
    </item>
    
    <item>
      <title>コマンドラインでスクリーンショット</title>
      <link>https://matutosi.github.io/post/20230806/</link>
      <pubDate>Sun, 06 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20230806/</guid>
      <description>Windowsで画面のスクリーンショットをとるにはPrtScを押せば良いが，コマンドラインから取りたいときには不便． コマンドラインからできないか探したら，C# でつくったものがあった． .net frameworkは必要だが，&amp;ldquo;selfcompiled C# program&amp;quot;とのことなので，batを実行すれば勝手にexeが生成される． これはすごい．
 https://superuser.com/questions/75614/take-a-screen-shot-from-command-line-in-windows#answer-943947 https://github.com/npocmaka/batch.scripts/blob/master/hybrids/.net/c/screenCapture.bat  また，下のところにあるコードはマルチディスプレイにも対応している．
 https://superuser.com/questions/75614/take-a-screen-shot-from-command-line-in-windows  </description>
    </item>
    
    <item>
      <title>Windowsのユーザ名のその後</title>
      <link>https://matutosi.github.io/post/20230731/</link>
      <pubDate>Mon, 31 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20230731/</guid>
      <description>少し前にWindows11のユーザ名変更について書いたが，別のPCでやったら色々と大変なことになった． その後なんとか修復したけど，普通にやりたい場合は，ネットで検索して出てくるものを参考にしたほうが良さそうだ．</description>
    </item>
    
    <item>
      <title>干し草の中から針を探す</title>
      <link>https://matutosi.github.io/post/20230730/</link>
      <pubDate>Sun, 30 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20230730/</guid>
      <description>PythonのPyAutoGUIには，画像認識をしてボタンをクリックする機能があるのだが(正確にはpyscreezeの機能)，RのKeyboardsimulatorには，それがない． PyAutoGUIからコードを辿って見ていくと，Confidenceの設定(Confidenceの設定はOpenCV使用)をしない場合は，単純に画像を端から一致するか判定しているみたいだ． これだったら，自分の力とRで実装できそう． 速度が遅ければ，検索部分のループだけ(ほぼCの)C++で書こう．
ところで，画像認識のコードに，needleImage と haystackImage という変数がでてくる． 一瞬何のことか分からなかったが，「干し草の中から針を探す」だ． すごく良い変数名だ． 自分のコードにもこのネーミングを使う予定だ．</description>
    </item>
    
    <item>
      <title>Windowsのユーザ名</title>
      <link>https://matutosi.github.io/post/20230725/</link>
      <pubDate>Tue, 25 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20230725/</guid>
      <description>Windows11のパソコンを複数台使っている． 初期設定のときに合わせればよかったのだが，ユーザ名(表示名も，実際のユーザー名)が異なっている． アプリケーションごとに保存されるデータが，C:\Users\USERNAME\AppData\Local\ (USERNAME：ユーザアカウント名)にあってここを指定するときに微妙にコードが異なってくるのがめんどくさい． %USERNAME%とかで処理していれば良いが，直接書いていることもあるためだ．
表示名(フルネーム)はわりと簡単に変更できるが，これを変更しても実際のユーザー名(ユーザーアカウント名)はそのまま残る． そのため，上記のユーザフォルダは変更されずにそのまま残っていた．
ユーザフォルダの名前を変更しようとしても，できないようになっている(そりゃそうだ)． レジストリの以下を変えると，フォルダ名を変更できるようになる．
コンピューター\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList
ProfileImagePath
https://pc-karuma.net/change-windows-11-user-folder-name/
ユーザやシステムの環境変数のPATHは，変更前のままなので変更する．
よくわからないけど，PC上の設定も変更前のままだったら，以下を参考にしてユーザーネームを変更する．
https://osechi-tech.net/windows11-username-change-method/
多分だがこれぐらいやっておけば，だいたいできた感じだろう．</description>
    </item>
    
    <item>
      <title>pivotea 1.0.1</title>
      <link>https://matutosi.github.io/post/20230716/</link>
      <pubDate>Sun, 16 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20230716/</guid>
      <description>Rでピボットテーブルのようなものをつくるためのパッケージpivoteaを更新した． ホグワーツのデータを追加し，ちょっとバグを修正．
 https://cran.r-project.org/web/packages/pivotea/ https://github.com/matutosi/pivotea/  </description>
    </item>
    
    <item>
      <title>R Package Scholar</title>
      <link>https://matutosi.github.io/post/20230629/</link>
      <pubDate>Thu, 29 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20230629/</guid>
      <description>R Package Scholarというのがあるらしく，pivoteaがこれに登録されたとの電子メールが届いた． &amp;ldquo;pivotea is quite a useful package so we created some page tools for it!&amp;ldquo;だとさ． たぶん，いろんなところに送っているのだろうけど，褒められるのは嬉しい．
 https://scholar.rpkg.net/authordetails.php?author=Toshikazu+Matsumura https://github.com/matutosi/pivotea/  </description>
    </item>
    
    <item>
      <title>hogwarts</title>
      <link>https://matutosi.github.io/post/20230617/</link>
      <pubDate>Sat, 17 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20230617/</guid>
      <description>pivotea (pivot easy)の時間割データとして良いものがないか探していたら，ホグワーツ魔法魔術学校の時間割を見つけた．
 https://github.com/Arcfej/HogwartsTimetable/  </description>
    </item>
    
    <item>
      <title>pivotea</title>
      <link>https://matutosi.github.io/post/20230616/</link>
      <pubDate>Fri, 16 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20230616/</guid>
      <description>Rでピボットテーブルのようなものをつくるためのパッケージpivoteaを作成した． 主な関数は，pivot()のみ． 詳細は以下を参考にして欲しい．
 https://cran.r-project.org/web/packages/pivotea/index.html https://github.com/matutosi/pivotea/  tidyなデータフレームをもとにして，列(row，縦)・行(col，横)・値(value，セルの中身)・分割(split)にそれぞれ配置したい列を文字列指定するだけで簡単にピボットテーブルのようなものが作れる． tidyr::pivot_wider(), tidyr::pivot_longer()でもピボットはできるが，同一セルに複数の値が入るときの処理が面倒くさい． 複数の値がある場合は，pivot()では縦に別の行として並べるところが，工夫点である． 同じコマに重複する科目があるときの時間割を作成するのに便利である(というか，それを目的に関数を作成した)． 以下のvignettesでは，このことが分かりにくいかもしれないと思ったので，時間割のデータを追加する予定．
 vignettes: https://cran.r-project.org/web/packages/pivotea/vignettes/pivoteasy.html  </description>
    </item>
    
    <item>
      <title>テスト駆動開発</title>
      <link>https://matutosi.github.io/post/20230103/</link>
      <pubDate>Tue, 03 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20230103/</guid>
      <description>テスト駆動開発というのは知っていたが，正直なところ面倒くさい感じがして，ちゃんと使っていなかった． ちょっとしたことだが，作ってみたいプログラムがあって，テスト駆動形で試してみた． 入力と出力が頭の中で整理されているのであれば(そうあるべきだが)，テストを先に作っておいてプログラムを書くのはすごく楽だとわかった．</description>
    </item>
    
    <item>
      <title>clidatajp</title>
      <link>https://matutosi.github.io/post/20220929/</link>
      <pubDate>Thu, 29 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20220929/</guid>
      <description>CRANからの返事があり，細かな修正点が3つあった．修正して，再投稿した．
  DESCRIPTIONファイルのdescriptionフィールドには，ウエブサイトをhttp://...のように入れること．
  Please provide a link to the used webservices to the description field of your DESCRIPTION file in the form http:... or https:... with angle brackets for auto-linking and no space after &amp;lsquo;http:&amp;rsquo; and &amp;lsquo;https:&amp;rsquo;.
  関数の戻り値をちゃんと書き，戻り値がない場合は，「No return value, called for side effects」のようにすること．
  Please add \value to .Rd files regarding exported methods and explain the functions results in the documentation. Please write about the structure of the output (class) and also what the output means.</description>
    </item>
    
    <item>
      <title>clidatajp</title>
      <link>https://matutosi.github.io/post/20220926/</link>
      <pubDate>Mon, 26 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20220926/</guid>
      <description>clidatajpというパッケージを作った． CRANからの返事はまだ無い． どこで処理が止まっているのかは，とんと見当がつかない．
https://github.com/matutosi/clidatajp/blob/main/READMEjp.md
ウソです．普通に時間がかかっているだけだと思います．</description>
    </item>
    
    <item>
      <title>RのNSE(Non-Standard Evaluation)</title>
      <link>https://matutosi.github.io/post/20220914/</link>
      <pubDate>Wed, 14 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20220914/</guid>
      <description>RのNSE(Non-Standard Evaluation)というのがあって，便利な面とそうでない面がある． 本来なら，列名を指定するのに，&amp;ldquo;displ&amp;quot;のように指定すべきところを，ダブルクオーテーションなしでdisplとできるので，普段は便利だ．
library(tidyverse)mpg %&amp;gt;%dplyr::select(displ, year, cyl) ただし，パッケージ開発をするときにこの使い方をしていると，devtools::check()でWarningsとかNotesの対象になる． 新たな列名として使いたいときには，以下のようにする必要がある．変数に入れた文字列を使う時，既存の列の指定では.data[col_nameとして，新たな列のときは{{col_name}}({{&amp;ldquo;year_displ&amp;rdquo;}}はエラー)とする．
col_1 &amp;lt;- &amp;#34;year&amp;#34;col_2 &amp;lt;- &amp;#34;displ&amp;#34;new_col &amp;lt;- &amp;#34;year_displ&amp;#34;# `:=`を通常の関数みたいに使用mpg %&amp;gt;%dplyr::transmute(`:=`({{new_col}}, stringr::str_c(.data[[col_1]], &amp;#34;_&amp;#34;, .data[[col_2]])))# 以下でも同じmpg %&amp;gt;%dplyr::transmute({{new_col}} := stringr::str_c(.data[[col_1]], &amp;#34;_&amp;#34;, .data[[col_2]])) </description>
    </item>
    
    <item>
      <title>MacでSelenium</title>
      <link>https://matutosi.github.io/post/20220905/</link>
      <pubDate>Mon, 05 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20220905/</guid>
      <description>準備：色々とインストール
# Homebrew/bin/bash -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&amp;#34;# Chorome driverbrew install chromedriver# javabrew tap AdoptOpenJDK/openjdkbrew install --cask adoptopenjdk12# check java installationjava -version# download seleniumcurl -OL https://selenium-release.storage.googleapis.com/3.141/selenium-server-standalone-3.141.59.jarmv selenium-server-standalone-3.141.59.jar /Applications/ seleniumの実行と
# run seleniumjava -jar /Applications/selenium-server-standalone-3.141.59.jar# ちょっとまっていると色々と表示される# check process idps -A | grep &amp;#39;java&amp;#39;# 12708 ttys000 0:00.20 /usr/bin/java -jar /Applications/selenium-server-standalone-3.141.59.jar# 12802 ttys000 0:00.00 grep java# stop selenium# 数字は1行目の左端に表示されるprocess idを入力kill 12708 </description>
    </item>
    
    <item>
      <title>RSelenium</title>
      <link>https://matutosi.github.io/post/20220821/</link>
      <pubDate>Sun, 21 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20220821/</guid>
      <description>RからSeleniumを操作しようとだいぶ前に色々とやっていたが，RSeleniumが動かず断念した． 一応，Pythonでやりたいことはしたが，それでもやはりRが慣れていて便利なので，再挑戦した． 色々と試した結果，Seleniumのバージョンが4.0以上の場合は，RSeleniumが動かないことがわかった． バージョン2や3だとうまく動いた．
Pythonで書いたコードをRに書き換えた． Pythonではdatarを使っていたので，Rへの移植はそれほど難しくなかった．</description>
    </item>
    
    <item>
      <title>datar</title>
      <link>https://matutosi.github.io/post/20220801/</link>
      <pubDate>Mon, 01 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://matutosi.github.io/post/20220801/</guid>
      <description>JavaScriptでのウェブページ操作で，ページ移動のたびにlocalStorageやsessionStorageから関数群を引き出すというトリッキーな使い方をしていた． これはこれで良いが，結局手作業が必要なのが不便だ．
そこでSeleniumを導入して自動化を試みたものの，RSeleniumがどうもうまくいかない． Pythonならつながるので，Selenium自体やChromeDriverはちゃんと動いているようだ． 仕方ないので，Pythonで操作しはじめたが，Rのtidyverseの便利さには敵わない． と思っていたら，datarというPythonのライブラリを見つけた． できる限りtidyverseとほぼ同じようにやってしまおうというライブラリのようだ． 試しに使ってみたら，ほとんどRの書き方でできる． これは便利だ． datarに慣れるとPythonを使っているのか，Rを使っているのか分からなくなりそう． まあ，そもそも使えれば良いので，そんなことはどっちでも良い．</description>
    </item>
    
  </channel>
</rss>
